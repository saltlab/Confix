trace = [];
function confixWrapper(statementType, statement, varList, varValueList, enclosingFunction, actualStatement) {
  trace.push({statementType: statementType, statement: statement, varList: varList, varValueList: varValueList, enclosingFunction: enclosingFunction, actualStatement: actualStatement});
  return actualStatement;
}
function getConfixTrace() {
  return trace;
}
var _XMLHttpRequest = XMLHttpRequest;
XMLHttpRequest = function() {
  var xhr = new _XMLHttpRequest();
  var _open = xhr.open;
  xhr.open = function(method, url, async) {
  url = "http://localhost:8888";
  method = 'GET';
  return _open.apply(this, [method, url, async]);
};
  return xhr;
};
function alert() {
}
function confirm() {
  return true;
}
var ECP_mouseisDown = confixWrapper("initvar", "var ECP_mouseisDown = false", [""], [], "", false);
var theColour = confixWrapper("initvar", "var theColour = \"#FF0000\"", [""], [], "", "#FF0000"), tC_RGB = confixWrapper("initvar", "var tC_RGB = new Array(255, 0, 0)", [""], [], "", new Array(255, 0, 0)), tC_HSV = confixWrapper("initvar", "var tC_HSV = new Array(0, 100, 100)", [""], [], "", new Array(0, 100, 100));
function deMoronize() {
  var inner1 = confixWrapper("initvar", "var inner1 = confixWrapper(\"functionCall\", \"dg('CPwutProp')\", [\"CPwutProp\"], ['CPwutProp'], \"deMoronize\", dg('CPwutProp')).innerHTML", [""], [], "deMoronize", confixWrapper("functionCall", "dg('CPwutProp')", ["CPwutProp"], ['CPwutProp'], "deMoronize", dg('CPwutProp')).innerHTML);
  var inner2 = confixWrapper("initvar", "var inner2 = confixWrapper(\"functionCall\", \"dg('CPwutObj')\", [\"CPwutObj\"], ['CPwutObj'], \"deMoronize\", dg('CPwutObj')).innerHTML", [""], [], "deMoronize", confixWrapper("functionCall", "dg('CPwutObj')", ["CPwutObj"], ['CPwutObj'], "deMoronize", dg('CPwutObj')).innerHTML);
  theColour = confixWrapper("infix", "theColour = confixWrapper(\"functionCall\", \"getFatherForECP(inner1, inner2)\", [\"inner1\", \"inner2\"], [inner1, inner2], \"deMoronize\", getFatherForECP(inner1, inner2))", [""], [], "deMoronize", confixWrapper("functionCall", "getFatherForECP(inner1, inner2)", ["inner1", "inner2"], [inner1, inner2], "deMoronize", getFatherForECP(inner1, inner2)));
  confixWrapper("functionCall", "SwitchDisplay('SuggestColor', (theColour != ''))", ["SuggestColor", "(theColour != )"], ['SuggestColor', (theColour != '')], "deMoronize", SwitchDisplay('SuggestColor', (theColour != '')));
  if (confixWrapper("condition", "theColour != ''", ["inner1", "inner2", "n2r", "ua", "isIE", "versionMinor", "isWin32", "myRGB", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [inner1, inner2, n2r, ua, isIE, versionMinor, isWin32, myRGB, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "deMoronize", theColour != '')) 
  {
    var n2r;
    if (confixWrapper("condition", "n2r = confixWrapper(\"functionCall\", \"name2rgb(theColour)\", [\"theColour\"], [theColour], \"deMoronize\", name2rgb(theColour))", ["inner1", "inner2", "n2r", "ua", "isIE", "versionMinor", "isWin32", "myRGB", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [inner1, inner2, n2r, ua, isIE, versionMinor, isWin32, myRGB, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "deMoronize", n2r = confixWrapper("infix", "n2r = confixWrapper(\"functionCall\", \"name2rgb(theColour)\", [\"theColour\"], [theColour], \"deMoronize\", name2rgb(theColour))", [""], [], "deMoronize", confixWrapper("functionCall", "name2rgb(theColour)", ["theColour"], [theColour], "deMoronize", name2rgb(theColour))))) 
    theColour = confixWrapper("infix", "theColour = n2r", [""], [], "deMoronize", n2r);
    confixWrapper("functionCall", "AnalyseColor(theColour, false)", ["theColour", "false"], [theColour, false], "deMoronize", AnalyseColor(theColour, false));
  }
  var ua = confixWrapper("initvar", "var ua = confixWrapper(\"functionCall\", \"navigator.userAgent.toLowerCase()\", [], [], \"deMoronize\", navigator.userAgent.toLowerCase())", [""], [], "deMoronize", confixWrapper("functionCall", "navigator.userAgent.toLowerCase()", [], [], "deMoronize", navigator.userAgent.toLowerCase()));
  var isIE = confixWrapper("initvar", "var isIE = ((confixWrapper(\"functionCall\", \"ua.indexOf('msie')\", [\"msie\"], ['msie'], \"deMoronize\", ua.indexOf('msie')) != -1) && (confixWrapper(\"functionCall\", \"ua.indexOf('opera')\", [\"opera\"], ['opera'], \"deMoronize\", ua.indexOf('opera')) == -1) && (confixWrapper(\"functionCall\", \"ua.indexOf('webtv')\", [\"webtv\"], ['webtv'], \"deMoronize\", ua.indexOf('webtv')) == -1))", [""], [], "deMoronize", ((confixWrapper("functionCall", "ua.indexOf('msie')", ["msie"], ['msie'], "deMoronize", ua.indexOf('msie')) != -1) && (confixWrapper("functionCall", "ua.indexOf('opera')", ["opera"], ['opera'], "deMoronize", ua.indexOf('opera')) == -1) && (confixWrapper("functionCall", "ua.indexOf('webtv')", ["webtv"], ['webtv'], "deMoronize", ua.indexOf('webtv')) == -1)));
  var versionMinor = confixWrapper("initvar", "var versionMinor = confixWrapper(\"functionCall\", \"parseFloat(navigator.appVersion)\", [\"navigator.appVersion\"], [navigator.appVersion], \"deMoronize\", parseFloat(navigator.appVersion))", [""], [], "deMoronize", confixWrapper("functionCall", "parseFloat(navigator.appVersion)", ["navigator.appVersion"], [navigator.appVersion], "deMoronize", parseFloat(navigator.appVersion)));
  if (confixWrapper("condition", "isIE && versionMinor >= 4", ["inner1", "inner2", "n2r", "ua", "isIE", "versionMinor", "isWin32", "myRGB", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [inner1, inner2, n2r, ua, isIE, versionMinor, isWin32, myRGB, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "deMoronize", isIE && versionMinor >= 4)) 
  versionMinor = confixWrapper("infix", "versionMinor = confixWrapper(\"functionCall\", \"parseFloat(ua.substring(ua.indexOf('msie ') + 5))\", [\"ua.substring(ua.indexOf(msie ) + 5)\"], [confixWrapper(\"functionCall\", \"ua.substring(ua.indexOf('msie ') + 5)\", [\"ua.indexOf(msie ) + 5\"], [confixWrapper(\"functionCall\", \"ua.indexOf('msie ')\", [\"msie \"], ['msie '], \"deMoronize\", ua.indexOf('msie ')) + 5], \"deMoronize\", ua.substring(confixWrapper(\"functionCall\", \"ua.indexOf('msie ')\", [\"msie \"], ['msie '], \"deMoronize\", ua.indexOf('msie ')) + 5))], \"deMoronize\", parseFloat(confixWrapper(\"functionCall\", \"ua.substring(ua.indexOf('msie ') + 5)\", [\"ua.indexOf(msie ) + 5\"], [confixWrapper(\"functionCall\", \"ua.indexOf('msie ')\", [\"msie \"], ['msie '], \"deMoronize\", ua.indexOf('msie ')) + 5], \"deMoronize\", ua.substring(confixWrapper(\"functionCall\", \"ua.indexOf('msie ')\", [\"msie \"], ['msie '], \"deMoronize\", ua.indexOf('msie ')) + 5))))", [""], [], "deMoronize", confixWrapper("functionCall", "parseFloat(ua.substring(ua.indexOf('msie ') + 5))", ["ua.substring(ua.indexOf(msie ) + 5)"], [confixWrapper("functionCall", "ua.substring(ua.indexOf('msie ') + 5)", ["ua.indexOf(msie ) + 5"], [confixWrapper("functionCall", "ua.indexOf('msie ')", ["msie "], ['msie '], "deMoronize", ua.indexOf('msie ')) + 5], "deMoronize", ua.substring(confixWrapper("functionCall", "ua.indexOf('msie ')", ["msie "], ['msie '], "deMoronize", ua.indexOf('msie ')) + 5))], "deMoronize", parseFloat(confixWrapper("functionCall", "ua.substring(ua.indexOf('msie ') + 5)", ["ua.indexOf(msie ) + 5"], [confixWrapper("functionCall", "ua.indexOf('msie ')", ["msie "], ['msie '], "deMoronize", ua.indexOf('msie ')) + 5], "deMoronize", ua.substring(confixWrapper("functionCall", "ua.indexOf('msie ')", ["msie "], ['msie '], "deMoronize", ua.indexOf('msie ')) + 5)))));
  var isWin32 = confixWrapper("initvar", "var isWin32 = ((confixWrapper(\"functionCall\", \"ua.indexOf('win')\", [\"win\"], ['win'], \"deMoronize\", ua.indexOf('win')) != -1) && (confixWrapper(\"functionCall\", \"ua.indexOf('95')\", [\"95\"], ['95'], \"deMoronize\", ua.indexOf('95')) != -1 || confixWrapper(\"functionCall\", \"ua.indexOf('98')\", [\"98\"], ['98'], \"deMoronize\", ua.indexOf('98')) != -1 || confixWrapper(\"functionCall\", \"ua.indexOf('nt')\", [\"nt\"], ['nt'], \"deMoronize\", ua.indexOf('nt')) != -1 || confixWrapper(\"functionCall\", \"ua.indexOf('win32')\", [\"win32\"], ['win32'], \"deMoronize\", ua.indexOf('win32')) != -1 || confixWrapper(\"functionCall\", \"ua.indexOf('32bit')\", [\"32bit\"], ['32bit'], \"deMoronize\", ua.indexOf('32bit')) != -1))", [""], [], "deMoronize", ((confixWrapper("functionCall", "ua.indexOf('win')", ["win"], ['win'], "deMoronize", ua.indexOf('win')) != -1) && (confixWrapper("functionCall", "ua.indexOf('95')", ["95"], ['95'], "deMoronize", ua.indexOf('95')) != -1 || confixWrapper("functionCall", "ua.indexOf('98')", ["98"], ['98'], "deMoronize", ua.indexOf('98')) != -1 || confixWrapper("functionCall", "ua.indexOf('nt')", ["nt"], ['nt'], "deMoronize", ua.indexOf('nt')) != -1 || confixWrapper("functionCall", "ua.indexOf('win32')", ["win32"], ['win32'], "deMoronize", ua.indexOf('win32')) != -1 || confixWrapper("functionCall", "ua.indexOf('32bit')", ["32bit"], ['32bit'], "deMoronize", ua.indexOf('32bit')) != -1)));
  if (confixWrapper("condition", "!(isIE && (versionMinor == 5.5 || confixWrapper(\"functionCall\", \"parseInt(versionMinor)\", [\"versionMinor\"], [versionMinor], \"deMoronize\", parseInt(versionMinor)) >= 6) && isWin32)", ["inner1", "inner2", "n2r", "ua", "isIE", "versionMinor", "isWin32", "myRGB", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [inner1, inner2, n2r, ua, isIE, versionMinor, isWin32, myRGB, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "deMoronize", !(isIE && (versionMinor == 5.5 || confixWrapper("functionCall", "parseInt(versionMinor)", ["versionMinor"], [versionMinor], "deMoronize", parseInt(versionMinor)) >= 6) && isWin32))) 
  confixWrapper("functionCall", "document.getElementById('wheel')", ["wheel"], ['wheel'], "deMoronize", document.getElementById('wheel')).innerHTML = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('wheel')\", [\"wheel\"], ['wheel'], \"deMoronize\", document.getElementById('wheel')).innerHTML = '<a href=\"#PsycHo!\" onmousemove=\"javascript:pickColor(); return false;\" ' + 'onmousedown=\"javascript: ECP_mouseisDown = true;\" onmouseup=\"javascript: ECP_mouseisDown = false;\"><img id=\"indic\" ' + 'src=\"images/indic.gif\" style=\"position: absolute; zindex: 2; border-width: 0px;\" /><img id=\"indic_gr\" src=\"images/indic.gif\" ' + 'style=\"position: absolute; zindex: 2; border-width: 0px;\" /><img id=\"wheelImg\" src=\"images/hsvwheel.png\" ' + 'width=\"533\" height=\"257\" border=\"0\"></a>'", [""], [], "deMoronize", '<a href="#PsycHo!" onmousemove="javascript:pickColor(); return false;" ' + 'onmousedown="javascript: ECP_mouseisDown = true;" onmouseup="javascript: ECP_mouseisDown = false;"><img id="indic" ' + 'src="images/indic.gif" style="position: absolute; zindex: 2; border-width: 0px;" /><img id="indic_gr" src="images/indic.gif" ' + 'style="position: absolute; zindex: 2; border-width: 0px;" /><img id="wheelImg" src="images/hsvwheel.png" ' + 'width="533" height="257" border="0"></a>');
  var myRGB = confixWrapper("initvar", "var myRGB = confixWrapper(\"functionCall\", \"dg('ECP_myRGBS')\", [\"ECP_myRGBS\"], ['ECP_myRGBS'], \"deMoronize\", dg('ECP_myRGBS'))", [""], [], "deMoronize", confixWrapper("functionCall", "dg('ECP_myRGBS')", ["ECP_myRGBS"], ['ECP_myRGBS'], "deMoronize", dg('ECP_myRGBS')));
  theColour = confixWrapper("infix", "theColour = myRGB.value", ["myRGB"], [myRGB], "deMoronize", myRGB.value);
  tC_HSV = confixWrapper("infix", "tC_HSV = confixWrapper(\"functionCall\", \"rgbs2hsv(theColour)\", [\"theColour\"], [theColour], \"deMoronize\", rgbs2hsv(theColour))", [""], [], "deMoronize", confixWrapper("functionCall", "rgbs2hsv(theColour)", ["theColour"], [theColour], "deMoronize", rgbs2hsv(theColour)));
  tC_RGB = confixWrapper("infix", "tC_RGB = confixWrapper(\"functionCall\", \"hsv2rgb(tC_HSV)\", [\"tC_HSV\"], [tC_HSV], \"deMoronize\", hsv2rgb(tC_HSV))", [""], [], "deMoronize", confixWrapper("functionCall", "hsv2rgb(tC_HSV)", ["tC_HSV"], [tC_HSV], "deMoronize", hsv2rgb(tC_HSV)));
  confixWrapper("functionCall", "hoverColor()", [], [], "deMoronize", hoverColor());
  confixWrapper("functionCall", "window.document.getElementById('wheel')", ["wheel"], ['wheel'], "deMoronize", window.document.getElementById('wheel')).onmousemove = confixWrapper("infix", "confixWrapper(\"functionCall\", \"window.document.getElementById('wheel')\", [\"wheel\"], ['wheel'], \"deMoronize\", window.document.getElementById('wheel')).onmousemove = mouseMoved", [""], [], "deMoronize", mouseMoved);
  confixWrapper("functionCall", "window.document.getElementById('wheel')", ["wheel"], ['wheel'], "deMoronize", window.document.getElementById('wheel')).onmousedown = confixWrapper("infix", "confixWrapper(\"functionCall\", \"window.document.getElementById('wheel')\", [\"wheel\"], ['wheel'], \"deMoronize\", window.document.getElementById('wheel')).onmousedown = mouseMoved", [""], [], "deMoronize", mouseMoved);
}
function hsv2rgb(Hdeg, S, V) {
  if (confixWrapper("condition", "Hdeg.length && Hdeg.length == 3", ["Hdeg", "S", "V", "H", "var_h", "var_i", "var_1", "var_2", "var_3", "var_r", "var_g", "var_b", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [Hdeg, S, V, H, var_h, var_i, var_1, var_2, var_3, var_r, var_g, var_b, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "hsv2rgb", Hdeg.length && Hdeg.length == 3)) 
  {
    V = confixWrapper("infix", "V = Hdeg[2]", [""], [], "hsv2rgb", Hdeg[2]);
    S = confixWrapper("infix", "S = Hdeg[1]", [""], [], "hsv2rgb", Hdeg[1]);
    Hdeg = confixWrapper("infix", "Hdeg = Hdeg[0]", [""], [], "hsv2rgb", Hdeg[0]);
  }
  var H = confixWrapper("initvar", "var H = Hdeg / 360", [""], [], "hsv2rgb", Hdeg / 360);
  S /= 100;
  V /= 100;
  if (confixWrapper("condition", "S == 0", ["Hdeg", "S", "V", "H", "var_h", "var_i", "var_1", "var_2", "var_3", "var_r", "var_g", "var_b", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [Hdeg, S, V, H, var_h, var_i, var_1, var_2, var_3, var_r, var_g, var_b, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "hsv2rgb", S == 0)) 
  return confixWrapper("return", "return new Array(V * 255, V * 255, V * 255);", [""], [], "hsv2rgb", new Array(V * 255, V * 255, V * 255)); else {
    var var_h = confixWrapper("initvar", "var var_h = H * 6", [""], [], "hsv2rgb", H * 6);
    var var_i = confixWrapper("initvar", "var var_i = confixWrapper(\"functionCall\", \"Math.floor(var_h)\", [\"var_h\"], [var_h], \"hsv2rgb\", Math.floor(var_h))", [""], [], "hsv2rgb", confixWrapper("functionCall", "Math.floor(var_h)", ["var_h"], [var_h], "hsv2rgb", Math.floor(var_h)));
    var var_1 = confixWrapper("initvar", "var var_1 = V * (1 - S)", [""], [], "hsv2rgb", V * (1 - S));
    var var_2 = confixWrapper("initvar", "var var_2 = V * (1 - S * (var_h - var_i))", [""], [], "hsv2rgb", V * (1 - S * (var_h - var_i)));
    var var_3 = confixWrapper("initvar", "var var_3 = V * (1 - S * (1 - (var_h - var_i)))", [""], [], "hsv2rgb", V * (1 - S * (1 - (var_h - var_i))));
    var var_r, var_g, var_b;
    switch (var_i) {
      case 0:
        var_r = confixWrapper("infix", "var_r = V", [""], [], "hsv2rgb", V);
        var_g = confixWrapper("infix", "var_g = var_3", [""], [], "hsv2rgb", var_3);
        var_b = confixWrapper("infix", "var_b = var_1", [""], [], "hsv2rgb", var_1);
        break;
      case 1:
        var_r = confixWrapper("infix", "var_r = var_2", [""], [], "hsv2rgb", var_2);
        var_g = confixWrapper("infix", "var_g = V", [""], [], "hsv2rgb", V);
        var_b = confixWrapper("infix", "var_b = var_1", [""], [], "hsv2rgb", var_1);
        break;
      case 2:
        var_r = confixWrapper("infix", "var_r = var_1", [""], [], "hsv2rgb", var_1);
        var_g = confixWrapper("infix", "var_g = V", [""], [], "hsv2rgb", V);
        var_b = confixWrapper("infix", "var_b = var_3", [""], [], "hsv2rgb", var_3);
        break;
      case 3:
        var_r = confixWrapper("infix", "var_r = var_1", [""], [], "hsv2rgb", var_1);
        var_g = confixWrapper("infix", "var_g = var_2", [""], [], "hsv2rgb", var_2);
        var_b = confixWrapper("infix", "var_b = V", [""], [], "hsv2rgb", V);
        break;
      case 4:
        var_r = confixWrapper("infix", "var_r = var_3", [""], [], "hsv2rgb", var_3);
        var_g = confixWrapper("infix", "var_g = var_1", [""], [], "hsv2rgb", var_1);
        var_b = confixWrapper("infix", "var_b = V", [""], [], "hsv2rgb", V);
        break;
      case 5:
        var_r = confixWrapper("infix", "var_r = V", [""], [], "hsv2rgb", V);
        var_g = confixWrapper("infix", "var_g = var_1", [""], [], "hsv2rgb", var_1);
        var_b = confixWrapper("infix", "var_b = var_2", [""], [], "hsv2rgb", var_2);
        break;
    }
  }
  return confixWrapper("return", "return new Array(confixWrapper(\"functionCall\", \"Math.round(var_r * 255)\", [\"var_r * 255\"], [var_r * 255], \"hsv2rgb\", Math.round(var_r * 255)), Math.round(var_g * 255), Math.round(var_b * 255));", [""], [], "hsv2rgb", new Array(confixWrapper("functionCall", "Math.round(var_r * 255)", ["var_r * 255"], [var_r * 255], "hsv2rgb", Math.round(var_r * 255)), Math.round(var_g * 255), Math.round(var_b * 255)));
}
function min(a, b, c) {
  return confixWrapper("return", "return a < b ? (a < c ? a : c) : (b < c ? b : c);", [""], [], "min", a < b ? (a < c ? a : c) : (b < c ? b : c));
}
function max(a, b, c) {
  return confixWrapper("return", "return a > b ? (a > c ? a : c) : (b > c ? b : c);", [""], [], "max", a > b ? (a > c ? a : c) : (b > c ? b : c));
}
function rgbs2hsv(s) {
  return confixWrapper("return", "return confixWrapper(\"functionCall\", \"rgb2hsv(parseInt(s.substring(1, 3), 16), parseInt(s.substring(3, 5), 16), parseInt(s.substring(5, 7), 16))\", [\"parseInt(s.substring(1, 3), 16)\", \"parseInt(s.substring(3, 5), 16)\", \"parseInt(s.substring(5, 7), 16)\"], [confixWrapper(\"functionCall\", \"parseInt(s.substring(1, 3), 16)\", [\"s.substring(1, 3)\", \"16\"], [confixWrapper(\"functionCall\", \"s.substring(1, 3)\", [\"1\", \"3\"], [1, 3], \"rgbs2hsv\", s.substring(1, 3)), 16], \"rgbs2hsv\", parseInt(confixWrapper(\"functionCall\", \"s.substring(1, 3)\", [\"1\", \"3\"], [1, 3], \"rgbs2hsv\", s.substring(1, 3)), 16)), parseInt(confixWrapper(\"functionCall\", \"s.substring(3, 5)\", [\"3\", \"5\"], [3, 5], \"rgbs2hsv\", s.substring(3, 5)), 16), parseInt(confixWrapper(\"functionCall\", \"s.substring(5, 7)\", [\"5\", \"7\"], [5, 7], \"rgbs2hsv\", s.substring(5, 7)), 16)], \"rgbs2hsv\", rgb2hsv(confixWrapper(\"functionCall\", \"parseInt(s.substring(1, 3), 16)\", [\"s.substring(1, 3)\", \"16\"], [confixWrapper(\"functionCall\", \"s.substring(1, 3)\", [\"1\", \"3\"], [1, 3], \"rgbs2hsv\", s.substring(1, 3)), 16], \"rgbs2hsv\", parseInt(confixWrapper(\"functionCall\", \"s.substring(1, 3)\", [\"1\", \"3\"], [1, 3], \"rgbs2hsv\", s.substring(1, 3)), 16)), parseInt(confixWrapper(\"functionCall\", \"s.substring(3, 5)\", [\"3\", \"5\"], [3, 5], \"rgbs2hsv\", s.substring(3, 5)), 16), parseInt(confixWrapper(\"functionCall\", \"s.substring(5, 7)\", [\"5\", \"7\"], [5, 7], \"rgbs2hsv\", s.substring(5, 7)), 16)));", [""], [], "rgbs2hsv", confixWrapper("functionCall", "rgb2hsv(parseInt(s.substring(1, 3), 16), parseInt(s.substring(3, 5), 16), parseInt(s.substring(5, 7), 16))", ["parseInt(s.substring(1, 3), 16)", "parseInt(s.substring(3, 5), 16)", "parseInt(s.substring(5, 7), 16)"], [confixWrapper("functionCall", "parseInt(s.substring(1, 3), 16)", ["s.substring(1, 3)", "16"], [confixWrapper("functionCall", "s.substring(1, 3)", ["1", "3"], [1, 3], "rgbs2hsv", s.substring(1, 3)), 16], "rgbs2hsv", parseInt(confixWrapper("functionCall", "s.substring(1, 3)", ["1", "3"], [1, 3], "rgbs2hsv", s.substring(1, 3)), 16)), parseInt(confixWrapper("functionCall", "s.substring(3, 5)", ["3", "5"], [3, 5], "rgbs2hsv", s.substring(3, 5)), 16), parseInt(confixWrapper("functionCall", "s.substring(5, 7)", ["5", "7"], [5, 7], "rgbs2hsv", s.substring(5, 7)), 16)], "rgbs2hsv", rgb2hsv(confixWrapper("functionCall", "parseInt(s.substring(1, 3), 16)", ["s.substring(1, 3)", "16"], [confixWrapper("functionCall", "s.substring(1, 3)", ["1", "3"], [1, 3], "rgbs2hsv", s.substring(1, 3)), 16], "rgbs2hsv", parseInt(confixWrapper("functionCall", "s.substring(1, 3)", ["1", "3"], [1, 3], "rgbs2hsv", s.substring(1, 3)), 16)), parseInt(confixWrapper("functionCall", "s.substring(3, 5)", ["3", "5"], [3, 5], "rgbs2hsv", s.substring(3, 5)), 16), parseInt(confixWrapper("functionCall", "s.substring(5, 7)", ["5", "7"], [5, 7], "rgbs2hsv", s.substring(5, 7)), 16))));
}
function rgb2hsv(R, G, B) {
  var R, G, B, H, S, V;
  if (confixWrapper("condition", "R.length && R.length == 3", ["R", "G", "B", "H", "S", "V", "var_R", "var_G", "var_B", "var_Min", "var_Max", "del_Max", "del_R", "del_G", "del_B", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [R, G, B, H, S, V, var_R, var_G, var_B, var_Min, var_Max, del_Max, del_R, del_G, del_B, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "rgb2hsv", R.length && R.length == 3)) 
  {
    B = confixWrapper("infix", "B = R[2]", [""], [], "rgb2hsv", R[2]);
    G = confixWrapper("infix", "G = R[1]", [""], [], "rgb2hsv", R[1]);
    R = confixWrapper("infix", "R = R[0]", [""], [], "rgb2hsv", R[0]);
  }
  var var_R = confixWrapper("initvar", "var var_R = (R / 255)", [""], [], "rgb2hsv", (R / 255)), var_G = confixWrapper("initvar", "var var_G = (G / 255)", [""], [], "rgb2hsv", (G / 255)), var_B = confixWrapper("initvar", "var var_B = (B / 255)", [""], [], "rgb2hsv", (B / 255));
  var var_Min = confixWrapper("initvar", "var var_Min = confixWrapper(\"functionCall\", \"min(var_R, var_G, var_B)\", [\"var_R\", \"var_G\", \"var_B\"], [var_R, var_G, var_B], \"rgb2hsv\", min(var_R, var_G, var_B))", [""], [], "rgb2hsv", confixWrapper("functionCall", "min(var_R, var_G, var_B)", ["var_R", "var_G", "var_B"], [var_R, var_G, var_B], "rgb2hsv", min(var_R, var_G, var_B)));
  var var_Max = confixWrapper("initvar", "var var_Max = confixWrapper(\"functionCall\", \"max(var_R, var_G, var_B)\", [\"var_R\", \"var_G\", \"var_B\"], [var_R, var_G, var_B], \"rgb2hsv\", max(var_R, var_G, var_B))", [""], [], "rgb2hsv", confixWrapper("functionCall", "max(var_R, var_G, var_B)", ["var_R", "var_G", "var_B"], [var_R, var_G, var_B], "rgb2hsv", max(var_R, var_G, var_B)));
  var del_Max = confixWrapper("initvar", "var del_Max = var_Max - var_Min", [""], [], "rgb2hsv", var_Max - var_Min);
  V = confixWrapper("infix", "V = var_Max", [""], [], "rgb2hsv", var_Max);
  if (confixWrapper("condition", "del_Max == 0", ["R", "G", "B", "H", "S", "V", "var_R", "var_G", "var_B", "var_Min", "var_Max", "del_Max", "del_R", "del_G", "del_B", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [R, G, B, H, S, V, var_R, var_G, var_B, var_Min, var_Max, del_Max, del_R, del_G, del_B, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "rgb2hsv", del_Max == 0)) 
  {
    H = confixWrapper("infix", "H = tC_HSV[0] / 360", [""], [], "rgb2hsv", tC_HSV[0] / 360);
    S = confixWrapper("infix", "S = 0", [""], [], "rgb2hsv", 0);
  } else {
    S = confixWrapper("infix", "S = del_Max / var_Max", [""], [], "rgb2hsv", del_Max / var_Max);
    var del_R = confixWrapper("initvar", "var del_R = (((var_Max - var_R) / 6) + (del_Max / 2)) / del_Max", [""], [], "rgb2hsv", (((var_Max - var_R) / 6) + (del_Max / 2)) / del_Max);
    var del_G = confixWrapper("initvar", "var del_G = (((var_Max - var_G) / 6) + (del_Max / 2)) / del_Max", [""], [], "rgb2hsv", (((var_Max - var_G) / 6) + (del_Max / 2)) / del_Max);
    var del_B = confixWrapper("initvar", "var del_B = (((var_Max - var_B) / 6) + (del_Max / 2)) / del_Max", [""], [], "rgb2hsv", (((var_Max - var_B) / 6) + (del_Max / 2)) / del_Max);
    if (confixWrapper("condition", "var_R == var_Max", ["R", "G", "B", "H", "S", "V", "var_R", "var_G", "var_B", "var_Min", "var_Max", "del_Max", "del_R", "del_G", "del_B", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [R, G, B, H, S, V, var_R, var_G, var_B, var_Min, var_Max, del_Max, del_R, del_G, del_B, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "rgb2hsv", var_R == var_Max)) 
    H = confixWrapper("infix", "H = del_B - del_G", [""], [], "rgb2hsv", del_B - del_G); else if (confixWrapper("condition", "var_G == var_Max", ["R", "G", "B", "H", "S", "V", "var_R", "var_G", "var_B", "var_Min", "var_Max", "del_Max", "del_R", "del_G", "del_B", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [R, G, B, H, S, V, var_R, var_G, var_B, var_Min, var_Max, del_Max, del_R, del_G, del_B, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "rgb2hsv", var_G == var_Max)) 
    H = confixWrapper("infix", "H = (1 / 3) + del_R - del_B", [""], [], "rgb2hsv", (1 / 3) + del_R - del_B); else if (confixWrapper("condition", "var_B == var_Max", ["R", "G", "B", "H", "S", "V", "var_R", "var_G", "var_B", "var_Min", "var_Max", "del_Max", "del_R", "del_G", "del_B", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [R, G, B, H, S, V, var_R, var_G, var_B, var_Min, var_Max, del_Max, del_R, del_G, del_B, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "rgb2hsv", var_B == var_Max)) 
    H = confixWrapper("infix", "H = (2 / 3) + del_G - del_R", [""], [], "rgb2hsv", (2 / 3) + del_G - del_R);
    while (H < 0) 
      H += 1;
    while (H > 1) 
      H -= 1;
  }
  H *= 360;
  S *= 100;
  V *= 100;
  return confixWrapper("return", "return new Array(confixWrapper(\"functionCall\", \"Math.round(H)\", [\"H\"], [H], \"rgb2hsv\", Math.round(H)), Math.round(S), Math.round(V));", [""], [], "rgb2hsv", new Array(confixWrapper("functionCall", "Math.round(H)", ["H"], [H], "rgb2hsv", Math.round(H)), Math.round(S), Math.round(V)));
}
function rgb2hex(rgbary) {
  var temp, ret = confixWrapper("initvar", "var ret = \"#\"", [""], [], "rgb2hex", "#");
  for (i = confixWrapper("infix", "i = 0", [""], [], "rgb2hex", 0); confixWrapper("loopCondition", "i < 3", [""], [], "rgb2hex", i < 3); i++) 
    {
      temp = confixWrapper("infix", "temp = confixWrapper(\"functionCall\", \"parseInt(rgbary[i]).toString(16).toUpperCase()\", [], [], \"rgb2hex\", confixWrapper(\"functionCall\", \"parseInt(rgbary[i]).toString(16)\", [\"16\"], [16], \"rgb2hex\", confixWrapper(\"functionCall\", \"parseInt(rgbary[i])\", [\"rgbary[i]\"], [rgbary[i]], \"rgb2hex\", parseInt(rgbary[i])).toString(16)).toUpperCase())", [""], [], "rgb2hex", confixWrapper("functionCall", "parseInt(rgbary[i]).toString(16).toUpperCase()", [], [], "rgb2hex", confixWrapper("functionCall", "parseInt(rgbary[i]).toString(16)", ["16"], [16], "rgb2hex", confixWrapper("functionCall", "parseInt(rgbary[i])", ["rgbary[i]"], [rgbary[i]], "rgb2hex", parseInt(rgbary[i])).toString(16)).toUpperCase()));
      if (confixWrapper("condition", "temp.length < 2", ["rgbary", "temp", "ret", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [rgbary, temp, ret, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "rgb2hex", temp.length < 2)) 
      temp = confixWrapper("infix", "temp = \"0\" + temp", [""], [], "rgb2hex", "0" + temp);
      ret += temp;
    }
  return confixWrapper("return", "return ret;", [""], [], "rgb2hex", ret);
}
function greyMoved(x, y) {
  var xside = confixWrapper("initvar", "var xside = (x <= 533) ? x - 276 : 256", [""], [], "greyMoved", (x <= 533) ? x - 276 : 256);
  var yside = confixWrapper("initvar", "var yside = (y <= 256) ? y : 256", [""], [], "greyMoved", (y <= 256) ? y : 256);
  var sat = confixWrapper("initvar", "var sat = (xside / 256) * 100", [""], [], "greyMoved", (xside / 256) * 100);
  var val = confixWrapper("initvar", "var val = (1 - (yside / 256)) * 100", [""], [], "greyMoved", (1 - (yside / 256)) * 100);
  var hue = confixWrapper("initvar", "var hue = tC_HSV[0]", [""], [], "greyMoved", tC_HSV[0]);
  tC_HSV = confixWrapper("infix", "tC_HSV = new Array(hue, sat, val)", [""], [], "greyMoved", new Array(hue, sat, val));
  tC_RGB = confixWrapper("infix", "tC_RGB = confixWrapper(\"functionCall\", \"hsv2rgb(tC_HSV)\", [\"tC_HSV\"], [tC_HSV], \"greyMoved\", hsv2rgb(tC_HSV))", [""], [], "greyMoved", confixWrapper("functionCall", "hsv2rgb(tC_HSV)", ["tC_HSV"], [tC_HSV], "greyMoved", hsv2rgb(tC_HSV)));
  confixWrapper("functionCall", "hoverColor()", [], [], "greyMoved", hoverColor());
  return confixWrapper("return", "return false;", [""], [], "greyMoved", false);
}
function xy2rgb(x, y) {
  var rgb = confixWrapper("initvar", "var rgb = new Array(0, 0, 0)", [""], [], "xy2rgb", new Array(0, 0, 0));
  var cartx = confixWrapper("initvar", "var cartx = x - 128", [""], [], "xy2rgb", x - 128);
  var carty = confixWrapper("initvar", "var carty = 128 - y", [""], [], "xy2rgb", 128 - y);
  var rraw = confixWrapper("initvar", "var rraw = confixWrapper(\"functionCall\", \"Math.sqrt(cartx * cartx + carty * carty)\", [\"cartx * cartx + carty * carty\"], [cartx * cartx + carty * carty], \"xy2rgb\", Math.sqrt(cartx * cartx + carty * carty))", [""], [], "xy2rgb", confixWrapper("functionCall", "Math.sqrt(cartx * cartx + carty * carty)", ["cartx * cartx + carty * carty"], [cartx * cartx + carty * carty], "xy2rgb", Math.sqrt(cartx * cartx + carty * carty)));
  var rnorm = confixWrapper("initvar", "var rnorm = rraw / 128", [""], [], "xy2rgb", rraw / 128);
  if (confixWrapper("condition", "rraw != 0", ["x", "y", "rgb", "cartx", "carty", "rraw", "rnorm", "arad", "aradc", "adeg", "sat", "val", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [x, y, rgb, cartx, carty, rraw, rnorm, arad, aradc, adeg, sat, val, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "xy2rgb", rraw != 0)) 
  if (confixWrapper("condition", "rnorm > 1", ["x", "y", "rgb", "cartx", "carty", "rraw", "rnorm", "arad", "aradc", "adeg", "sat", "val", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [x, y, rgb, cartx, carty, rraw, rnorm, arad, aradc, adeg, sat, val, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "xy2rgb", rnorm > 1)) 
  rgb = confixWrapper("infix", "rgb = new Array(255, 255, 255)", [""], [], "xy2rgb", new Array(255, 255, 255)); else {
    var arad = confixWrapper("initvar", "var arad = confixWrapper(\"functionCall\", \"Math.acos(cartx / rraw)\", [\"cartx / rraw\"], [cartx / rraw], \"xy2rgb\", Math.acos(cartx / rraw))", [""], [], "xy2rgb", confixWrapper("functionCall", "Math.acos(cartx / rraw)", ["cartx / rraw"], [cartx / rraw], "xy2rgb", Math.acos(cartx / rraw)));
    var aradc = confixWrapper("initvar", "var aradc = (carty >= 0) ? arad : 2 * Math.PI - arad", [""], [], "xy2rgb", (carty >= 0) ? arad : 2 * Math.PI - arad);
    var adeg = confixWrapper("initvar", "var adeg = 360 * aradc / (2 * Math.PI)", [""], [], "xy2rgb", 360 * aradc / (2 * Math.PI));
    var sat = confixWrapper("initvar", "var sat = 100", [""], [], "xy2rgb", 100), val = confixWrapper("initvar", "var val = 100", [""], [], "xy2rgb", 100);
    if (confixWrapper("condition", "rnorm >= .5", ["x", "y", "rgb", "cartx", "carty", "rraw", "rnorm", "arad", "aradc", "adeg", "sat", "val", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [x, y, rgb, cartx, carty, rraw, rnorm, arad, aradc, adeg, sat, val, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "xy2rgb", rnorm >= .5)) 
    sat = confixWrapper("infix", "sat = (1 - ((rnorm - .5) * 2)) * 100", [""], [], "xy2rgb", (1 - ((rnorm - .5) * 2)) * 100); else val = confixWrapper("infix", "val = rnorm * 2 * 100", [""], [], "xy2rgb", rnorm * 2 * 100);
    rgb = confixWrapper("infix", "rgb = confixWrapper(\"functionCall\", \"hsv2rgb(adeg, sat, val)\", [\"adeg\", \"sat\", \"val\"], [adeg, sat, val], \"xy2rgb\", hsv2rgb(adeg, sat, val))", [""], [], "xy2rgb", confixWrapper("functionCall", "hsv2rgb(adeg, sat, val)", ["adeg", "sat", "val"], [adeg, sat, val], "xy2rgb", hsv2rgb(adeg, sat, val)));
  }
  return confixWrapper("return", "return rgb;", [""], [], "xy2rgb", rgb);
}
function mouseMoved(e) {
  var mouseClick = confixWrapper("initvar", "var mouseClick = (e) ? (typeof e.button == \"undefined\" ? e.which : e.button) : window.event.button", [""], [], "mouseMoved", (e) ? (typeof e.button == "undefined" ? e.which : e.button) : window.event.button);
  if (confixWrapper("condition", "(mouseClick != 1 || (!e && window.event.srcElement.id != 'wheelImg')) && !ECP_mouseisDown", ["e", "mouseClick", "x", "y", "thergb", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [e, mouseClick, x, y, thergb, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "mouseMoved", (mouseClick != 1 || (!e && window.event.srcElement.id != 'wheelImg')) && !ECP_mouseisDown)) 
  return;
  var x, y;
  if (confixWrapper("condition", "document.all", ["e", "mouseClick", "x", "y", "thergb", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [e, mouseClick, x, y, thergb, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "mouseMoved", document.all)) 
  {
    x = confixWrapper("infix", "x = event.offsetX", [""], [], "mouseMoved", event.offsetX);
    y = confixWrapper("infix", "y = event.offsetY", [""], [], "mouseMoved", event.offsetY);
  } else if (confixWrapper("condition", "document.getElementById", ["e", "mouseClick", "x", "y", "thergb", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [e, mouseClick, x, y, thergb, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "mouseMoved", document.getElementById)) 
  {
    x = confixWrapper("infix", "x = (e.pageX - confixWrapper(\"functionCall\", \"document.getElementById('wheel')\", [\"wheel\"], ['wheel'], \"mouseMoved\", document.getElementById('wheel')).offsetLeft - confixWrapper(\"functionCall\", \"document.getElementById(\"ColorPicker\")\", [\"ColorPicker\"], [\"ColorPicker\"], \"mouseMoved\", document.getElementById(\"ColorPicker\")).offsetLeft)", [""], [], "mouseMoved", (e.pageX - confixWrapper("functionCall", "document.getElementById('wheel')", ["wheel"], ['wheel'], "mouseMoved", document.getElementById('wheel')).offsetLeft - confixWrapper("functionCall", "document.getElementById(\"ColorPicker\")", ["ColorPicker"], ["ColorPicker"], "mouseMoved", document.getElementById("ColorPicker")).offsetLeft));
    y = confixWrapper("infix", "y = (e.pageY - confixWrapper(\"functionCall\", \"document.getElementById('wheel')\", [\"wheel\"], ['wheel'], \"mouseMoved\", document.getElementById('wheel')).offsetTop - confixWrapper(\"functionCall\", \"document.getElementById(\"ColorPicker\")\", [\"ColorPicker\"], [\"ColorPicker\"], \"mouseMoved\", document.getElementById(\"ColorPicker\")).offsetTop)", [""], [], "mouseMoved", (e.pageY - confixWrapper("functionCall", "document.getElementById('wheel')", ["wheel"], ['wheel'], "mouseMoved", document.getElementById('wheel')).offsetTop - confixWrapper("functionCall", "document.getElementById(\"ColorPicker\")", ["ColorPicker"], ["ColorPicker"], "mouseMoved", document.getElementById("ColorPicker")).offsetTop));
  }
  if (confixWrapper("condition", "x >= 276", ["e", "mouseClick", "x", "y", "thergb", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [e, mouseClick, x, y, thergb, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "mouseMoved", x >= 276)) 
  {
    confixWrapper("functionCall", "greyMoved(x, y)", ["x", "y"], [x, y], "mouseMoved", greyMoved(x, y));
    return confixWrapper("return", "return false;", [""], [], "mouseMoved", false);
  }
  if (confixWrapper("condition", "y > 256 || x < 0", ["e", "mouseClick", "x", "y", "thergb", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [e, mouseClick, x, y, thergb, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "mouseMoved", y > 256 || x < 0)) 
  return confixWrapper("return", "return false;", [""], [], "mouseMoved", false);
  var thergb = confixWrapper("initvar", "var thergb = confixWrapper(\"functionCall\", \"xy2rgb(x, y)\", [\"x\", \"y\"], [x, y], \"mouseMoved\", xy2rgb(x, y))", [""], [], "mouseMoved", confixWrapper("functionCall", "xy2rgb(x, y)", ["x", "y"], [x, y], "mouseMoved", xy2rgb(x, y)));
  tC_RGB = confixWrapper("infix", "tC_RGB = thergb", [""], [], "mouseMoved", thergb);
  tC_HSV = confixWrapper("infix", "tC_HSV = confixWrapper(\"functionCall\", \"rgb2hsv(thergb)\", [\"thergb\"], [thergb], \"mouseMoved\", rgb2hsv(thergb))", [""], [], "mouseMoved", confixWrapper("functionCall", "rgb2hsv(thergb)", ["thergb"], [thergb], "mouseMoved", rgb2hsv(thergb)));
  confixWrapper("functionCall", "hoverColor()", [], [], "mouseMoved", hoverColor());
  return confixWrapper("return", "return false;", [""], [], "mouseMoved", false);
}
function pickColor() {
  var hue = confixWrapper("initvar", "var hue = tC_HSV[0]", [""], [], "pickColor", tC_HSV[0]);
  confixWrapper("functionCall", "document.getElementById('wheel')", ["wheel"], ['wheel'], "pickColor", document.getElementById('wheel')).style.backgroundColor = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('wheel')\", [\"wheel\"], ['wheel'], \"pickColor\", document.getElementById('wheel')).style.backgroundColor = rgb2hex(confixWrapper(\"functionCall\", \"hsv2rgb(hue, 100, 100)\", [\"hue\", \"100\", \"100\"], [hue, 100, 100], \"pickColor\", hsv2rgb(hue, 100, 100)))", [""], [], "pickColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(hue, 100, 100)", ["hue", "100", "100"], [hue, 100, 100], "pickColor", hsv2rgb(hue, 100, 100))));
}
function reHSV(thehsv, dh, ds, dv) {
  var ret = confixWrapper("initvar", "var ret = new Array(thehsv[0], thehsv[1], thehsv[2])", [""], [], "reHSV", new Array(thehsv[0], thehsv[1], thehsv[2]));
  if (confixWrapper("condition", "!ds", ["thehsv", "dh", "ds", "dv", "ret", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [thehsv, dh, ds, dv, ret, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "reHSV", !ds)) 
  ds = confixWrapper("infix", "ds = 0", [""], [], "reHSV", 0);
  if (confixWrapper("condition", "!dv", ["thehsv", "dh", "ds", "dv", "ret", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [thehsv, dh, ds, dv, ret, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "reHSV", !dv)) 
  dv = confixWrapper("infix", "dv = 0", [""], [], "reHSV", 0);
  ret[0] = confixWrapper("infix", "ret[0] = (ret[0] + dh) % 360", [""], [], "reHSV", (ret[0] + dh) % 360);
  ret[1] += ds;
  while (ret[1] < 0) 
    ret[1] += 100;
  while (ret[1] > 100) 
    ret[1] -= 100;
  ret[2] += dv;
  while (ret[2] < 0) 
    ret[2] += 100;
  while (ret[2] > 100) 
    ret[2] -= 100;
  return confixWrapper("return", "return ret;", [""], [], "reHSV", ret);
}
function ComplementTheColor(theColour) {
  var tcc = confixWrapper("initvar", "var tcc = confixWrapper(\"functionCall\", \"rgbs2hsv(theColour)\", [\"theColour\"], [theColour], \"ComplementTheColor\", rgbs2hsv(theColour))", [""], [], "ComplementTheColor", confixWrapper("functionCall", "rgbs2hsv(theColour)", ["theColour"], [theColour], "ComplementTheColor", rgbs2hsv(theColour)));
  return confixWrapper("return", "return (tcc[2] < 33) ? \"#999999\" : ((tcc[2] < 66) ? \"#CCCCCC\" : \"#333333\");", [""], [], "ComplementTheColor", (tcc[2] < 33) ? "#999999" : ((tcc[2] < 66) ? "#CCCCCC" : "#333333"));
}
function AnalyseColor(theColour, plc) {
  tC_HSV = confixWrapper("infix", "tC_HSV = confixWrapper(\"functionCall\", \"rgbs2hsv(theColour)\", [\"theColour\"], [theColour], \"AnalyseColor\", rgbs2hsv(theColour))", [""], [], "AnalyseColor", confixWrapper("functionCall", "rgbs2hsv(theColour)", ["theColour"], [theColour], "AnalyseColor", rgbs2hsv(theColour)));
  var dH = confixWrapper("initvar", "var dH = tC_HSV[0]", [""], [], "AnalyseColor", tC_HSV[0]), dS = confixWrapper("initvar", "var dS = tC_HSV[1]", [""], [], "AnalyseColor", tC_HSV[1]), dV = confixWrapper("initvar", "var dV = tC_HSV[2]", [""], [], "AnalyseColor", tC_HSV[2]);
  var dset1 = confixWrapper("initvar", "var dset1 = new Array(0, 0, 0)", [""], [], "AnalyseColor", new Array(0, 0, 0)), dset2 = confixWrapper("initvar", "var dset2 = new Array(0, 0, 0)", [""], [], "AnalyseColor", new Array(0, 0, 0));
  if (confixWrapper("condition", "(dH >= 0) && (dH < 30)", ["theColour", "plc", "dH", "dS", "dV", "dset1", "dset2", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, plc, dH, dS, dV, dset1, dset2, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "AnalyseColor", (dH >= 0) && (dH < 30))) 
  {
    dset1[0] = confixWrapper("infix", "dset1[0] = dset2[0] = 20", [""], [], "AnalyseColor", dset2[0] = confixWrapper("infix", "dset2[0] = 20", [""], [], "AnalyseColor", 20));
    dset2[2] = confixWrapper("infix", "dset2[2] = dV > 70 ? -30 : 30", [""], [], "AnalyseColor", dV > 70 ? -30 : 30);
  }
  if (confixWrapper("condition", "(dH >= 30) && (dH < 60)", ["theColour", "plc", "dH", "dS", "dV", "dset1", "dset2", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, plc, dH, dS, dV, dset1, dset2, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "AnalyseColor", (dH >= 30) && (dH < 60))) 
  {
    dset1[0] = confixWrapper("infix", "dset1[0] = dset2[0] = 150", [""], [], "AnalyseColor", dset2[0] = confixWrapper("infix", "dset2[0] = 150", [""], [], "AnalyseColor", 150));
    dset1[1] = confixWrapper("infix", "dset1[1] = -30", [""], [], "AnalyseColor", -30);
    dset1[2] = confixWrapper("infix", "dset1[2] = -20", [""], [], "AnalyseColor", -20);
    dset2[1] = confixWrapper("infix", "dset2[1] = -70", [""], [], "AnalyseColor", -70);
    dset2[2] = confixWrapper("infix", "dset2[2] = 20", [""], [], "AnalyseColor", 20);
  }
  if (confixWrapper("condition", "(dH >= 60) && (dH < 180)", ["theColour", "plc", "dH", "dS", "dV", "dset1", "dset2", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, plc, dH, dS, dV, dset1, dset2, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "AnalyseColor", (dH >= 60) && (dH < 180))) 
  {
    dset1[0] = confixWrapper("infix", "dset1[0] = dset2[0] = -40", [""], [], "AnalyseColor", dset2[0] = confixWrapper("infix", "dset2[0] = -40", [""], [], "AnalyseColor", -40));
    dset2[2] = confixWrapper("infix", "dset2[2] = dV > 70 ? -30 : 30", [""], [], "AnalyseColor", dV > 70 ? -30 : 30);
  }
  if (confixWrapper("condition", "(dH >= 180) && (dH < 220)", ["theColour", "plc", "dH", "dS", "dV", "dset1", "dset2", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, plc, dH, dS, dV, dset1, dset2, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "AnalyseColor", (dH >= 180) && (dH < 220))) 
  {
    dset1[0] = confixWrapper("infix", "dset1[0] = -170", [""], [], "AnalyseColor", -170);
    dset2[0] = confixWrapper("infix", "dset2[0] = -160", [""], [], "AnalyseColor", -160);
    dset2[2] = confixWrapper("infix", "dset2[2] = dV > 70 ? -30 : 30", [""], [], "AnalyseColor", dV > 70 ? -30 : 30);
  }
  if (confixWrapper("condition", "(dH >= 220) && (dH < 300)", ["theColour", "plc", "dH", "dS", "dV", "dset1", "dset2", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, plc, dH, dS, dV, dset1, dset2, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "AnalyseColor", (dH >= 220) && (dH < 300))) 
  {
    dset1[1] = confixWrapper("infix", "dset1[1] = dset2[1] = -60", [""], [], "AnalyseColor", dset2[1] = confixWrapper("infix", "dset2[1] = -60", [""], [], "AnalyseColor", -60));
    dset2[2] = confixWrapper("infix", "dset2[2] = dV > 70 ? -30 : 30", [""], [], "AnalyseColor", dV > 70 ? -30 : 30);
  }
  if (confixWrapper("condition", "dH >= 300", ["theColour", "plc", "dH", "dS", "dV", "dset1", "dset2", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, plc, dH, dS, dV, dset1, dset2, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "AnalyseColor", dH >= 300)) 
  {
    dset1[0] = confixWrapper("infix", "dset1[0] = dset2[0] = 20", [""], [], "AnalyseColor", dset2[0] = confixWrapper("infix", "dset2[0] = 20", [""], [], "AnalyseColor", 20));
    dset1[1] = confixWrapper("infix", "dset1[1] = dset2[1] = dS > 50 ? -40 : 40", [""], [], "AnalyseColor", dset2[1] = confixWrapper("infix", "dset2[1] = dS > 50 ? -40 : 40", [""], [], "AnalyseColor", dS > 50 ? -40 : 40));
    dset2[2] = confixWrapper("infix", "dset2[2] = dV > 70 ? -30 : 30", [""], [], "AnalyseColor", dV > 70 ? -30 : 30);
  }
  confixWrapper("functionCall", "setECPCell('1', plc, theColour)", ["1", "plc", "theColour"], ['1', plc, theColour], "AnalyseColor", setECPCell('1', plc, theColour));
  for (var i = confixWrapper("initvar", "var i = 0", [""], [], "AnalyseColor", 0); confixWrapper("loopCondition", "i < 6", [""], [], "AnalyseColor", i < 6); i++) 
    confixWrapper("functionCall", "setECPCell((i + 1) + '', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))))", ["(i + 1) + ", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)))"], [(i + 1) + '', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)))", ["hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))", ["reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "60 * i", "(dS < 10) ? 10 - dS : 0", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "60 * i", "(dS < 10) ? 10 - dS : 0", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))", ["reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "60 * i", "(dS < 10) ? 10 - dS : 0", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "60 * i", "(dS < 10) ? 10 - dS : 0", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))))))], "AnalyseColor", setECPCell((i + 1) + '', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)))", ["hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))", ["reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "60 * i", "(dS < 10) ? 10 - dS : 0", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "60 * i", "(dS < 10) ? 10 - dS : 0", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))", ["reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "60 * i", "(dS < 10) ? 10 - dS : 0", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "60 * i", "(dS < 10) ? 10 - dS : 0", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 60 * i, (dS < 10) ? 10 - dS : 0, (dV < 15) ? 15 - dV : 0))))))));
  confixWrapper("functionCall", "setECPCell('7', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV))))", ["7", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV)))"], ['7', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV)))", ["hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV))", ["reHSV(tC_HSV, 180, dV - dS, dS - dV)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 180, dV - dS, dS - dV)", ["tC_HSV", "180", "dV - dS", "dS - dV"], [tC_HSV, 180, dV - dS, dS - dV], "AnalyseColor", reHSV(tC_HSV, 180, dV - dS, dS - dV))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 180, dV - dS, dS - dV)", ["tC_HSV", "180", "dV - dS", "dS - dV"], [tC_HSV, 180, dV - dS, dS - dV], "AnalyseColor", reHSV(tC_HSV, 180, dV - dS, dS - dV))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV))", ["reHSV(tC_HSV, 180, dV - dS, dS - dV)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 180, dV - dS, dS - dV)", ["tC_HSV", "180", "dV - dS", "dS - dV"], [tC_HSV, 180, dV - dS, dS - dV], "AnalyseColor", reHSV(tC_HSV, 180, dV - dS, dS - dV))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 180, dV - dS, dS - dV)", ["tC_HSV", "180", "dV - dS", "dS - dV"], [tC_HSV, 180, dV - dS, dS - dV], "AnalyseColor", reHSV(tC_HSV, 180, dV - dS, dS - dV))))))], "AnalyseColor", setECPCell('7', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV)))", ["hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV))", ["reHSV(tC_HSV, 180, dV - dS, dS - dV)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 180, dV - dS, dS - dV)", ["tC_HSV", "180", "dV - dS", "dS - dV"], [tC_HSV, 180, dV - dS, dS - dV], "AnalyseColor", reHSV(tC_HSV, 180, dV - dS, dS - dV))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 180, dV - dS, dS - dV)", ["tC_HSV", "180", "dV - dS", "dS - dV"], [tC_HSV, 180, dV - dS, dS - dV], "AnalyseColor", reHSV(tC_HSV, 180, dV - dS, dS - dV))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 180, dV - dS, dS - dV))", ["reHSV(tC_HSV, 180, dV - dS, dS - dV)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 180, dV - dS, dS - dV)", ["tC_HSV", "180", "dV - dS", "dS - dV"], [tC_HSV, 180, dV - dS, dS - dV], "AnalyseColor", reHSV(tC_HSV, 180, dV - dS, dS - dV))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 180, dV - dS, dS - dV)", ["tC_HSV", "180", "dV - dS", "dS - dV"], [tC_HSV, 180, dV - dS, dS - dV], "AnalyseColor", reHSV(tC_HSV, 180, dV - dS, dS - dV))))))));
  confixWrapper("functionCall", "setECPCell('8', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))))", ["8", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)))"], ['8', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)))", ["hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))", ["reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)", ["tC_HSV", "0", "0", "(tC_HSV[2] > 70) ? -30 : 30"], [tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30], "AnalyseColor", reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)", ["tC_HSV", "0", "0", "(tC_HSV[2] > 70) ? -30 : 30"], [tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30], "AnalyseColor", reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))", ["reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)", ["tC_HSV", "0", "0", "(tC_HSV[2] > 70) ? -30 : 30"], [tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30], "AnalyseColor", reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)", ["tC_HSV", "0", "0", "(tC_HSV[2] > 70) ? -30 : 30"], [tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30], "AnalyseColor", reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))))))], "AnalyseColor", setECPCell('8', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)))", ["hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))", ["reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)", ["tC_HSV", "0", "0", "(tC_HSV[2] > 70) ? -30 : 30"], [tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30], "AnalyseColor", reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)", ["tC_HSV", "0", "0", "(tC_HSV[2] > 70) ? -30 : 30"], [tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30], "AnalyseColor", reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))", ["reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)", ["tC_HSV", "0", "0", "(tC_HSV[2] > 70) ? -30 : 30"], [tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30], "AnalyseColor", reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30)", ["tC_HSV", "0", "0", "(tC_HSV[2] > 70) ? -30 : 30"], [tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30], "AnalyseColor", reHSV(tC_HSV, 0, 0, (tC_HSV[2] > 70) ? -30 : 30))))))));
  confixWrapper("functionCall", "setECPCell('9', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))))", ["9", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])))"], ['9', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])))", ["hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))", ["reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])"], [confixWrapper("functionCall", "reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])", ["tC_HSV", "dset1[0]", "dset1[1]", "dset1[2]"], [tC_HSV, dset1[0], dset1[1], dset1[2]], "AnalyseColor", reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])", ["tC_HSV", "dset1[0]", "dset1[1]", "dset1[2]"], [tC_HSV, dset1[0], dset1[1], dset1[2]], "AnalyseColor", reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))", ["reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])"], [confixWrapper("functionCall", "reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])", ["tC_HSV", "dset1[0]", "dset1[1]", "dset1[2]"], [tC_HSV, dset1[0], dset1[1], dset1[2]], "AnalyseColor", reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])", ["tC_HSV", "dset1[0]", "dset1[1]", "dset1[2]"], [tC_HSV, dset1[0], dset1[1], dset1[2]], "AnalyseColor", reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))))))], "AnalyseColor", setECPCell('9', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])))", ["hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))", ["reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])"], [confixWrapper("functionCall", "reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])", ["tC_HSV", "dset1[0]", "dset1[1]", "dset1[2]"], [tC_HSV, dset1[0], dset1[1], dset1[2]], "AnalyseColor", reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])", ["tC_HSV", "dset1[0]", "dset1[1]", "dset1[2]"], [tC_HSV, dset1[0], dset1[1], dset1[2]], "AnalyseColor", reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))", ["reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])"], [confixWrapper("functionCall", "reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])", ["tC_HSV", "dset1[0]", "dset1[1]", "dset1[2]"], [tC_HSV, dset1[0], dset1[1], dset1[2]], "AnalyseColor", reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, dset1[0], dset1[1], dset1[2])", ["tC_HSV", "dset1[0]", "dset1[1]", "dset1[2]"], [tC_HSV, dset1[0], dset1[1], dset1[2]], "AnalyseColor", reHSV(tC_HSV, dset1[0], dset1[1], dset1[2]))))))));
  confixWrapper("functionCall", "setECPCell('10', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))))", ["10", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])))"], ['10', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])))", ["hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))", ["reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])"], [confixWrapper("functionCall", "reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])", ["tC_HSV", "dset2[0]", "dset2[1]", "dset2[2]"], [tC_HSV, dset2[0], dset2[1], dset2[2]], "AnalyseColor", reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])", ["tC_HSV", "dset2[0]", "dset2[1]", "dset2[2]"], [tC_HSV, dset2[0], dset2[1], dset2[2]], "AnalyseColor", reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))", ["reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])"], [confixWrapper("functionCall", "reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])", ["tC_HSV", "dset2[0]", "dset2[1]", "dset2[2]"], [tC_HSV, dset2[0], dset2[1], dset2[2]], "AnalyseColor", reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])", ["tC_HSV", "dset2[0]", "dset2[1]", "dset2[2]"], [tC_HSV, dset2[0], dset2[1], dset2[2]], "AnalyseColor", reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))))))], "AnalyseColor", setECPCell('10', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])))", ["hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))", ["reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])"], [confixWrapper("functionCall", "reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])", ["tC_HSV", "dset2[0]", "dset2[1]", "dset2[2]"], [tC_HSV, dset2[0], dset2[1], dset2[2]], "AnalyseColor", reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])", ["tC_HSV", "dset2[0]", "dset2[1]", "dset2[2]"], [tC_HSV, dset2[0], dset2[1], dset2[2]], "AnalyseColor", reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))", ["reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])"], [confixWrapper("functionCall", "reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])", ["tC_HSV", "dset2[0]", "dset2[1]", "dset2[2]"], [tC_HSV, dset2[0], dset2[1], dset2[2]], "AnalyseColor", reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, dset2[0], dset2[1], dset2[2])", ["tC_HSV", "dset2[0]", "dset2[1]", "dset2[2]"], [tC_HSV, dset2[0], dset2[1], dset2[2]], "AnalyseColor", reHSV(tC_HSV, dset2[0], dset2[1], dset2[2]))))))));
  confixWrapper("functionCall", "setECPCell('11', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0))))", ["11", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0)))"], ['11', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0)))", ["hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0))", ["reHSV(tC_HSV, -dH, -dS, 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 0)", ["tC_HSV", "-dH", "-dS", "0"], [tC_HSV, -dH, -dS, 0], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 0)", ["tC_HSV", "-dH", "-dS", "0"], [tC_HSV, -dH, -dS, 0], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 0))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0))", ["reHSV(tC_HSV, -dH, -dS, 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 0)", ["tC_HSV", "-dH", "-dS", "0"], [tC_HSV, -dH, -dS, 0], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 0)", ["tC_HSV", "-dH", "-dS", "0"], [tC_HSV, -dH, -dS, 0], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 0))))))], "AnalyseColor", setECPCell('11', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0)))", ["hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0))", ["reHSV(tC_HSV, -dH, -dS, 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 0)", ["tC_HSV", "-dH", "-dS", "0"], [tC_HSV, -dH, -dS, 0], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 0)", ["tC_HSV", "-dH", "-dS", "0"], [tC_HSV, -dH, -dS, 0], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 0))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, -dH, -dS, 0))", ["reHSV(tC_HSV, -dH, -dS, 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 0)", ["tC_HSV", "-dH", "-dS", "0"], [tC_HSV, -dH, -dS, 0], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 0)", ["tC_HSV", "-dH", "-dS", "0"], [tC_HSV, -dH, -dS, 0], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 0))))))));
  confixWrapper("functionCall", "setECPCell('12', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))))", ["12", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)))"], ['12', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)))", ["hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))", ["reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)"], [confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)", ["tC_HSV", "-dH", "-dS", "100 - 2 * dV"], [tC_HSV, -dH, -dS, 100 - 2 * dV], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)", ["tC_HSV", "-dH", "-dS", "100 - 2 * dV"], [tC_HSV, -dH, -dS, 100 - 2 * dV], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))", ["reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)"], [confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)", ["tC_HSV", "-dH", "-dS", "100 - 2 * dV"], [tC_HSV, -dH, -dS, 100 - 2 * dV], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)", ["tC_HSV", "-dH", "-dS", "100 - 2 * dV"], [tC_HSV, -dH, -dS, 100 - 2 * dV], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))))))], "AnalyseColor", setECPCell('12', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)))", ["hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))", ["reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)"], [confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)", ["tC_HSV", "-dH", "-dS", "100 - 2 * dV"], [tC_HSV, -dH, -dS, 100 - 2 * dV], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)", ["tC_HSV", "-dH", "-dS", "100 - 2 * dV"], [tC_HSV, -dH, -dS, 100 - 2 * dV], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))", ["reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)"], [confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)", ["tC_HSV", "-dH", "-dS", "100 - 2 * dV"], [tC_HSV, -dH, -dS, 100 - 2 * dV], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV)", ["tC_HSV", "-dH", "-dS", "100 - 2 * dV"], [tC_HSV, -dH, -dS, 100 - 2 * dV], "AnalyseColor", reHSV(tC_HSV, -dH, -dS, 100 - 2 * dV))))))));
  for (var i = confixWrapper("initvar", "var i = 0", [""], [], "AnalyseColor", 0); confixWrapper("loopCondition", "i < 6", [""], [], "AnalyseColor", i < 6); i++) 
    confixWrapper("functionCall", "setECPCell((i + 13) + '', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))))", ["(i + 13) + ", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)))"], [(i + 13) + '', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)))", ["hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))", ["reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "0", "-dS + (i + 1) * 100 / 6", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "0", "-dS + (i + 1) * 100 / 6", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))", ["reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "0", "-dS + (i + 1) * 100 / 6", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "0", "-dS + (i + 1) * 100 / 6", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))))))], "AnalyseColor", setECPCell((i + 13) + '', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)))", ["hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))", ["reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "0", "-dS + (i + 1) * 100 / 6", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "0", "-dS + (i + 1) * 100 / 6", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))", ["reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "0", "-dS + (i + 1) * 100 / 6", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0)", ["tC_HSV", "0", "-dS + (i + 1) * 100 / 6", "(dV < 15) ? 15 - dV : 0"], [tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0], "AnalyseColor", reHSV(tC_HSV, 0, -dS + (i + 1) * 100 / 6, (dV < 15) ? 15 - dV : 0))))))));
  for (var i = confixWrapper("initvar", "var i = 0", [""], [], "AnalyseColor", 0); confixWrapper("loopCondition", "i < 6", [""], [], "AnalyseColor", i < 6); i++) 
    confixWrapper("functionCall", "setECPCell((i + 19) + '', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))))", ["(i + 19) + ", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)))"], [(i + 19) + '', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)))", ["hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))", ["reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 6"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 6], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 6"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 6], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))", ["reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 6"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 6], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 6"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 6], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))))))], "AnalyseColor", setECPCell((i + 19) + '', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)))", ["hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))", ["reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 6"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 6], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 6"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 6], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))", ["reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 6"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 6], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 6"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 6], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 6))))))));
  if (confixWrapper("condition", "dS == 0", ["theColour", "plc", "dH", "dS", "dV", "dset1", "dset2", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, plc, dH, dS, dV, dset1, dset2, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "AnalyseColor", dS == 0)) 
  {
    confixWrapper("functionCall", "setECPCell('10', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15))))", ["10", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15)))"], ['10', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15)))", ["hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 0, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + 20, -dV + 15)", ["tC_HSV", "0", "-dS + 20", "-dV + 15"], [tC_HSV, 0, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 0, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + 20, -dV + 15)", ["tC_HSV", "0", "-dS + 20", "-dV + 15"], [tC_HSV, 0, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 0, -dS + 20, -dV + 15))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 0, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + 20, -dV + 15)", ["tC_HSV", "0", "-dS + 20", "-dV + 15"], [tC_HSV, 0, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 0, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + 20, -dV + 15)", ["tC_HSV", "0", "-dS + 20", "-dV + 15"], [tC_HSV, 0, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 0, -dS + 20, -dV + 15))))))], "AnalyseColor", setECPCell('10', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15)))", ["hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 0, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + 20, -dV + 15)", ["tC_HSV", "0", "-dS + 20", "-dV + 15"], [tC_HSV, 0, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 0, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + 20, -dV + 15)", ["tC_HSV", "0", "-dS + 20", "-dV + 15"], [tC_HSV, 0, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 0, -dS + 20, -dV + 15))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 0, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + 20, -dV + 15)", ["tC_HSV", "0", "-dS + 20", "-dV + 15"], [tC_HSV, 0, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 0, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, -dS + 20, -dV + 15)", ["tC_HSV", "0", "-dS + 20", "-dV + 15"], [tC_HSV, 0, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 0, -dS + 20, -dV + 15))))))));
    confixWrapper("functionCall", "setECPCell('11', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15))))", ["11", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15)))"], ['11', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15)))", ["hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 120, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 120, -dS + 20, -dV + 15)", ["tC_HSV", "120", "-dS + 20", "-dV + 15"], [tC_HSV, 120, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 120, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 120, -dS + 20, -dV + 15)", ["tC_HSV", "120", "-dS + 20", "-dV + 15"], [tC_HSV, 120, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 120, -dS + 20, -dV + 15))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 120, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 120, -dS + 20, -dV + 15)", ["tC_HSV", "120", "-dS + 20", "-dV + 15"], [tC_HSV, 120, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 120, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 120, -dS + 20, -dV + 15)", ["tC_HSV", "120", "-dS + 20", "-dV + 15"], [tC_HSV, 120, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 120, -dS + 20, -dV + 15))))))], "AnalyseColor", setECPCell('11', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15)))", ["hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 120, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 120, -dS + 20, -dV + 15)", ["tC_HSV", "120", "-dS + 20", "-dV + 15"], [tC_HSV, 120, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 120, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 120, -dS + 20, -dV + 15)", ["tC_HSV", "120", "-dS + 20", "-dV + 15"], [tC_HSV, 120, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 120, -dS + 20, -dV + 15))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 120, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 120, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 120, -dS + 20, -dV + 15)", ["tC_HSV", "120", "-dS + 20", "-dV + 15"], [tC_HSV, 120, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 120, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 120, -dS + 20, -dV + 15)", ["tC_HSV", "120", "-dS + 20", "-dV + 15"], [tC_HSV, 120, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 120, -dS + 20, -dV + 15))))))));
    confixWrapper("functionCall", "setECPCell('12', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15))))", ["12", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15)))"], ['12', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15)))", ["hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 240, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 240, -dS + 20, -dV + 15)", ["tC_HSV", "240", "-dS + 20", "-dV + 15"], [tC_HSV, 240, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 240, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 240, -dS + 20, -dV + 15)", ["tC_HSV", "240", "-dS + 20", "-dV + 15"], [tC_HSV, 240, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 240, -dS + 20, -dV + 15))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 240, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 240, -dS + 20, -dV + 15)", ["tC_HSV", "240", "-dS + 20", "-dV + 15"], [tC_HSV, 240, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 240, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 240, -dS + 20, -dV + 15)", ["tC_HSV", "240", "-dS + 20", "-dV + 15"], [tC_HSV, 240, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 240, -dS + 20, -dV + 15))))))], "AnalyseColor", setECPCell('12', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15)))", ["hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 240, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 240, -dS + 20, -dV + 15)", ["tC_HSV", "240", "-dS + 20", "-dV + 15"], [tC_HSV, 240, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 240, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 240, -dS + 20, -dV + 15)", ["tC_HSV", "240", "-dS + 20", "-dV + 15"], [tC_HSV, 240, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 240, -dS + 20, -dV + 15))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 240, -dS + 20, -dV + 15))", ["reHSV(tC_HSV, 240, -dS + 20, -dV + 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 240, -dS + 20, -dV + 15)", ["tC_HSV", "240", "-dS + 20", "-dV + 15"], [tC_HSV, 240, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 240, -dS + 20, -dV + 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 240, -dS + 20, -dV + 15)", ["tC_HSV", "240", "-dS + 20", "-dV + 15"], [tC_HSV, 240, -dS + 20, -dV + 15], "AnalyseColor", reHSV(tC_HSV, 240, -dS + 20, -dV + 15))))))));
    for (var i = confixWrapper("initvar", "var i = 0", [""], [], "AnalyseColor", 0); confixWrapper("loopCondition", "i < 12", [""], [], "AnalyseColor", i < 12); i++) 
      confixWrapper("functionCall", "setECPCell((i + 13) + '', plc, rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))))", ["(i + 13) + ", "plc", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)))"], [(i + 13) + '', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)))", ["hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))", ["reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 15"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 15], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 15"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 15], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))", ["reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 15"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 15], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 15"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 15], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))))))], "AnalyseColor", setECPCell((i + 13) + '', plc, confixWrapper("functionCall", "rgb2hex(hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)))", ["hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))"], [confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))", ["reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 15"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 15], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 15"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 15], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))))], "AnalyseColor", rgb2hex(confixWrapper("functionCall", "hsv2rgb(reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))", ["reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)"], [confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 15"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 15], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))], "AnalyseColor", hsv2rgb(confixWrapper("functionCall", "reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15)", ["tC_HSV", "0", "0", "-dV + 100 - i * 100 / 15"], [tC_HSV, 0, 0, -dV + 100 - i * 100 / 15], "AnalyseColor", reHSV(tC_HSV, 0, 0, -dV + 100 - i * 100 / 15))))))));
  }
  tC_HSV = confixWrapper("infix", "tC_HSV = confixWrapper(\"functionCall\", \"rgb2hsv(tC_RGB)\", [\"tC_RGB\"], [tC_RGB], \"AnalyseColor\", rgb2hsv(tC_RGB))", [""], [], "AnalyseColor", confixWrapper("functionCall", "rgb2hsv(tC_RGB)", ["tC_RGB"], [tC_RGB], "AnalyseColor", rgb2hsv(tC_RGB)));
}
function hoverColor() {
  var theColour = confixWrapper("initvar", "var theColour = confixWrapper(\"functionCall\", \"rgb2hex(tC_RGB)\", [\"tC_RGB\"], [tC_RGB], \"hoverColor\", rgb2hex(tC_RGB))", [""], [], "hoverColor", confixWrapper("functionCall", "rgb2hex(tC_RGB)", ["tC_RGB"], [tC_RGB], "hoverColor", rgb2hex(tC_RGB))), thatColour;
  var dH = confixWrapper("initvar", "var dH = tC_HSV[0]", [""], [], "hoverColor", tC_HSV[0]), dS = confixWrapper("initvar", "var dS = tC_HSV[1]", [""], [], "hoverColor", tC_HSV[1]), dV = confixWrapper("initvar", "var dV = tC_HSV[2]", [""], [], "hoverColor", tC_HSV[2]);
  var len = confixWrapper("initvar", "var len = 0", [""], [], "hoverColor", 0), rad = confixWrapper("initvar", "var rad = 128", [""], [], "hoverColor", 128), myVal;
  if (confixWrapper("condition", "dS != 0 || dV != 0", ["theColour", "thatColour", "dH", "dS", "dV", "len", "rad", "myVal", "degrad", "centx", "centy", "gry", "grx", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, thatColour, dH, dS, dV, len, rad, myVal, degrad, centx, centy, gry, grx, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "hoverColor", dS != 0 || dV != 0)) 
  len = confixWrapper("infix", "len = (dS >= dV) ? (dV / dS) : (2 - dS / dV)", [""], [], "hoverColor", (dS >= dV) ? (dV / dS) : (2 - dS / dV));
  var degrad = confixWrapper("initvar", "var degrad = (dH * Math.PI / 180)", [""], [], "hoverColor", (dH * Math.PI / 180));
  var centx = confixWrapper("initvar", "var centx = confixWrapper(\"functionCall\", \"Math.round(128 - Math.sin(degrad) * (64 * len))\", [\"128 - Math.sin(degrad) * (64 * len)\"], [128 - confixWrapper(\"functionCall\", \"Math.sin(degrad)\", [\"degrad\"], [degrad], \"hoverColor\", Math.sin(degrad)) * (64 * len)], \"hoverColor\", Math.round(128 - confixWrapper(\"functionCall\", \"Math.sin(degrad)\", [\"degrad\"], [degrad], \"hoverColor\", Math.sin(degrad)) * (64 * len))) - 3", [""], [], "hoverColor", confixWrapper("functionCall", "Math.round(128 - Math.sin(degrad) * (64 * len))", ["128 - Math.sin(degrad) * (64 * len)"], [128 - confixWrapper("functionCall", "Math.sin(degrad)", ["degrad"], [degrad], "hoverColor", Math.sin(degrad)) * (64 * len)], "hoverColor", Math.round(128 - confixWrapper("functionCall", "Math.sin(degrad)", ["degrad"], [degrad], "hoverColor", Math.sin(degrad)) * (64 * len))) - 3);
  var centy = confixWrapper("initvar", "var centy = confixWrapper(\"functionCall\", \"Math.round(128 + Math.cos(degrad) * (64 * len))\", [\"128 + Math.cos(degrad) * (64 * len)\"], [128 + confixWrapper(\"functionCall\", \"Math.cos(degrad)\", [\"degrad\"], [degrad], \"hoverColor\", Math.cos(degrad)) * (64 * len)], \"hoverColor\", Math.round(128 + confixWrapper(\"functionCall\", \"Math.cos(degrad)\", [\"degrad\"], [degrad], \"hoverColor\", Math.cos(degrad)) * (64 * len))) - 3", [""], [], "hoverColor", confixWrapper("functionCall", "Math.round(128 + Math.cos(degrad) * (64 * len))", ["128 + Math.cos(degrad) * (64 * len)"], [128 + confixWrapper("functionCall", "Math.cos(degrad)", ["degrad"], [degrad], "hoverColor", Math.cos(degrad)) * (64 * len)], "hoverColor", Math.round(128 + confixWrapper("functionCall", "Math.cos(degrad)", ["degrad"], [degrad], "hoverColor", Math.cos(degrad)) * (64 * len))) - 3);
  var gry = confixWrapper("initvar", "var gry = 256 * (1 - dV / 100) - 3", [""], [], "hoverColor", 256 * (1 - dV / 100) - 3);
  var grx = confixWrapper("initvar", "var grx = 276 + (dS * 256 / 100) - 3", [""], [], "hoverColor", 276 + (dS * 256 / 100) - 3);
  confixWrapper("functionCall", "document.getElementById('indic')", ["indic"], ['indic'], "hoverColor", document.getElementById('indic')).style.top = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('indic')\", [\"indic\"], ['indic'], \"hoverColor\", document.getElementById('indic')).style.top = (centx) + 'px'", [""], [], "hoverColor", (centx) + 'px');
  confixWrapper("functionCall", "document.getElementById('indic')", ["indic"], ['indic'], "hoverColor", document.getElementById('indic')).style.left = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('indic')\", [\"indic\"], ['indic'], \"hoverColor\", document.getElementById('indic')).style.left = (centy) + 'px'", [""], [], "hoverColor", (centy) + 'px');
  confixWrapper("functionCall", "document.getElementById('indic')", ["indic"], ['indic'], "hoverColor", document.getElementById('indic')).src = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('indic')\", [\"indic\"], ['indic'], \"hoverColor\", document.getElementById('indic')).src = (len > 1) ? 'images/indic.gif' : 'images/indic_.gif'", [""], [], "hoverColor", (len > 1) ? 'images/indic.gif' : 'images/indic_.gif');
  confixWrapper("functionCall", "document.getElementById('indic_gr')", ["indic_gr"], ['indic_gr'], "hoverColor", document.getElementById('indic_gr')).style.top = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('indic_gr')\", [\"indic_gr\"], ['indic_gr'], \"hoverColor\", document.getElementById('indic_gr')).style.top = (gry) + 'px'", [""], [], "hoverColor", (gry) + 'px');
  confixWrapper("functionCall", "document.getElementById('indic_gr')", ["indic_gr"], ['indic_gr'], "hoverColor", document.getElementById('indic_gr')).style.left = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('indic_gr')\", [\"indic_gr\"], ['indic_gr'], \"hoverColor\", document.getElementById('indic_gr')).style.left = (grx) + 'px'", [""], [], "hoverColor", (grx) + 'px');
  confixWrapper("functionCall", "document.getElementById('indic_gr')", ["indic_gr"], ['indic_gr'], "hoverColor", document.getElementById('indic_gr')).src = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('indic_gr')\", [\"indic_gr\"], ['indic_gr'], \"hoverColor\", document.getElementById('indic_gr')).src = (grx - 276 > gry) ? 'images/indic.gif' : 'images/indic_.gif'", [""], [], "hoverColor", (grx - 276 > gry) ? 'images/indic.gif' : 'images/indic_.gif');
  for (var i = confixWrapper("initvar", "var i = 0", [""], [], "hoverColor", 0); confixWrapper("loopCondition", "i < 3", [""], [], "hoverColor", i < 3); i++) 
    {
      confixWrapper("functionCall", "document.getElementById('ECP_my' + ('HSV'.charAt(i)))", ["ECP_my + (HSV.charAt(i))"], ['ECP_my' + (confixWrapper("functionCall", "'HSV'.charAt(i)", ["i"], [i], "hoverColor", 'HSV'.charAt(i)))], "hoverColor", document.getElementById('ECP_my' + (confixWrapper("functionCall", "'HSV'.charAt(i)", ["i"], [i], "hoverColor", 'HSV'.charAt(i))))).value = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('ECP_my' + ('HSV'.charAt(i)))\", [\"ECP_my + (HSV.charAt(i))\"], ['ECP_my' + (confixWrapper(\"functionCall\", \"'HSV'.charAt(i)\", [\"i\"], [i], \"hoverColor\", 'HSV'.charAt(i)))], \"hoverColor\", document.getElementById('ECP_my' + (confixWrapper(\"functionCall\", \"'HSV'.charAt(i)\", [\"i\"], [i], \"hoverColor\", 'HSV'.charAt(i))))).value = Math.round(tC_HSV[i])", [""], [], "hoverColor", Math.round(tC_HSV[i]));
      myVal = confixWrapper("infix", "myVal = confixWrapper(\"functionCall\", \"Math.round(tC_RGB[i])\", [\"tC_RGB[i]\"], [tC_RGB[i]], \"hoverColor\", Math.round(tC_RGB[i]))", [""], [], "hoverColor", confixWrapper("functionCall", "Math.round(tC_RGB[i])", ["tC_RGB[i]"], [tC_RGB[i]], "hoverColor", Math.round(tC_RGB[i])));
      if (confixWrapper("condition", "confixWrapper(\"functionCall\", \"document.getElementById('ECP_my' + ('RGB'.charAt(i)))\", [\"ECP_my + (RGB.charAt(i))\"], ['ECP_my' + (confixWrapper(\"functionCall\", \"'RGB'.charAt(i)\", [\"i\"], [i], \"hoverColor\", 'RGB'.charAt(i)))], \"hoverColor\", document.getElementById('ECP_my' + (confixWrapper(\"functionCall\", \"'RGB'.charAt(i)\", [\"i\"], [i], \"hoverColor\", 'RGB'.charAt(i))))).value && confixWrapper(\"functionCall\", \"document.getElementById('ECP_my' + ('RGB'.charAt(i))).value.charAt(0)\", [\"0\"], [0], \"hoverColor\", confixWrapper(\"functionCall\", \"document.getElementById('ECP_my' + ('RGB'.charAt(i)))\", [\"ECP_my + (RGB.charAt(i))\"], ['ECP_my' + (confixWrapper(\"functionCall\", \"'RGB'.charAt(i)\", [\"i\"], [i], \"hoverColor\", 'RGB'.charAt(i)))], \"hoverColor\", document.getElementById('ECP_my' + (confixWrapper(\"functionCall\", \"'RGB'.charAt(i)\", [\"i\"], [i], \"hoverColor\", 'RGB'.charAt(i))))).value.charAt(0)) == '#'", ["theColour", "thatColour", "dH", "dS", "dV", "len", "rad", "myVal", "degrad", "centx", "centy", "gry", "grx", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, thatColour, dH, dS, dV, len, rad, myVal, degrad, centx, centy, gry, grx, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "hoverColor", confixWrapper("functionCall", "document.getElementById('ECP_my' + ('RGB'.charAt(i)))", ["ECP_my + (RGB.charAt(i))"], ['ECP_my' + (confixWrapper("functionCall", "'RGB'.charAt(i)", ["i"], [i], "hoverColor", 'RGB'.charAt(i)))], "hoverColor", document.getElementById('ECP_my' + (confixWrapper("functionCall", "'RGB'.charAt(i)", ["i"], [i], "hoverColor", 'RGB'.charAt(i))))).value && confixWrapper("functionCall", "document.getElementById('ECP_my' + ('RGB'.charAt(i))).value.charAt(0)", ["0"], [0], "hoverColor", confixWrapper("functionCall", "document.getElementById('ECP_my' + ('RGB'.charAt(i)))", ["ECP_my + (RGB.charAt(i))"], ['ECP_my' + (confixWrapper("functionCall", "'RGB'.charAt(i)", ["i"], [i], "hoverColor", 'RGB'.charAt(i)))], "hoverColor", document.getElementById('ECP_my' + (confixWrapper("functionCall", "'RGB'.charAt(i)", ["i"], [i], "hoverColor", 'RGB'.charAt(i))))).value.charAt(0)) == '#')) 
      {
        myVal = confixWrapper("infix", "myVal = confixWrapper(\"functionCall\", \"myVal.toString(16).toUpperCase()\", [], [], \"hoverColor\", confixWrapper(\"functionCall\", \"myVal.toString(16)\", [\"16\"], [16], \"hoverColor\", myVal.toString(16)).toUpperCase())", [""], [], "hoverColor", confixWrapper("functionCall", "myVal.toString(16).toUpperCase()", [], [], "hoverColor", confixWrapper("functionCall", "myVal.toString(16)", ["16"], [16], "hoverColor", myVal.toString(16)).toUpperCase()));
        if (confixWrapper("condition", "myVal.length < 2", ["theColour", "thatColour", "dH", "dS", "dV", "len", "rad", "myVal", "degrad", "centx", "centy", "gry", "grx", "i", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [theColour, thatColour, dH, dS, dV, len, rad, myVal, degrad, centx, centy, gry, grx, i, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "hoverColor", myVal.length < 2)) 
        myVal = confixWrapper("infix", "myVal = '0' + myVal", [""], [], "hoverColor", '0' + myVal);
        myVal = confixWrapper("infix", "myVal = '#' + myVal", [""], [], "hoverColor", '#' + myVal);
      }
      confixWrapper("functionCall", "document.getElementById('ECP_my' + ('RGB'.charAt(i)))", ["ECP_my + (RGB.charAt(i))"], ['ECP_my' + (confixWrapper("functionCall", "'RGB'.charAt(i)", ["i"], [i], "hoverColor", 'RGB'.charAt(i)))], "hoverColor", document.getElementById('ECP_my' + (confixWrapper("functionCall", "'RGB'.charAt(i)", ["i"], [i], "hoverColor", 'RGB'.charAt(i))))).value = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('ECP_my' + ('RGB'.charAt(i)))\", [\"ECP_my + (RGB.charAt(i))\"], ['ECP_my' + (confixWrapper(\"functionCall\", \"'RGB'.charAt(i)\", [\"i\"], [i], \"hoverColor\", 'RGB'.charAt(i)))], \"hoverColor\", document.getElementById('ECP_my' + (confixWrapper(\"functionCall\", \"'RGB'.charAt(i)\", [\"i\"], [i], \"hoverColor\", 'RGB'.charAt(i))))).value = myVal", [""], [], "hoverColor", myVal);
    }
  confixWrapper("functionCall", "document.getElementById('ECP_myColorPrev')", ["ECP_myColorPrev"], ['ECP_myColorPrev'], "hoverColor", document.getElementById('ECP_myColorPrev')).style.backgroundColor = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('ECP_myColorPrev')\", [\"ECP_myColorPrev\"], ['ECP_myColorPrev'], \"hoverColor\", document.getElementById('ECP_myColorPrev')).style.backgroundColor = theColour", [""], [], "hoverColor", theColour);
  confixWrapper("functionCall", "document.getElementById('ECP_myRGBS')", ["ECP_myRGBS"], ['ECP_myRGBS'], "hoverColor", document.getElementById('ECP_myRGBS')).value = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('ECP_myRGBS')\", [\"ECP_myRGBS\"], ['ECP_myRGBS'], \"hoverColor\", document.getElementById('ECP_myRGBS')).value = theColour", [""], [], "hoverColor", theColour);
  confixWrapper("functionCall", "IPickColor(theColour)", ["theColour"], [theColour], "hoverColor", IPickColor(theColour));
  confixWrapper("functionCall", "pickColor()", [], [], "hoverColor", pickColor());
  return confixWrapper("return", "return false;", [""], [], "hoverColor", false);
}
function setECPCell(x, isfatheric, v) {
  var prefix = confixWrapper("initvar", "var prefix = (isfatheric) ? 'F' : 'C'", [""], [], "setECPCell", (isfatheric) ? 'F' : 'C');
  confixWrapper("functionCall", "document.getElementById('ECP_' + prefix + '_ColDiv' + x)", ["ECP_ + prefix + _ColDiv + x"], ['ECP_' + prefix + '_ColDiv' + x], "setECPCell", document.getElementById('ECP_' + prefix + '_ColDiv' + x)).style.backgroundColor = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('ECP_' + prefix + '_ColDiv' + x)\", [\"ECP_ + prefix + _ColDiv + x\"], ['ECP_' + prefix + '_ColDiv' + x], \"setECPCell\", document.getElementById('ECP_' + prefix + '_ColDiv' + x)).style.backgroundColor = v", [""], [], "setECPCell", v);
  confixWrapper("functionCall", "document.getElementById('ECP_' + prefix + '_ColDiv' + x).setAttribute('title', v)", ["title", "v"], ['title', v], "setECPCell", confixWrapper("functionCall", "document.getElementById('ECP_' + prefix + '_ColDiv' + x)", ["ECP_ + prefix + _ColDiv + x"], ['ECP_' + prefix + '_ColDiv' + x], "setECPCell", document.getElementById('ECP_' + prefix + '_ColDiv' + x)).setAttribute('title', v));
  confixWrapper("functionCall", "document.getElementById('ECP_' + prefix + '_Sinput' + x)", ["ECP_ + prefix + _Sinput + x"], ['ECP_' + prefix + '_Sinput' + x], "setECPCell", document.getElementById('ECP_' + prefix + '_Sinput' + x)).innerHTML = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById('ECP_' + prefix + '_Sinput' + x)\", [\"ECP_ + prefix + _Sinput + x\"], ['ECP_' + prefix + '_Sinput' + x], \"setECPCell\", document.getElementById('ECP_' + prefix + '_Sinput' + x)).innerHTML = v", [""], [], "setECPCell", v);
}
function getValFromInput(s, maxv) {
  var ret = confixWrapper("initvar", "var ret = 0", [""], [], "getValFromInput", 0);
  var val = confixWrapper("initvar", "var val = confixWrapper(\"functionCall\", \"document.getElementById(s)\", [\"s\"], [s], \"getValFromInput\", document.getElementById(s)).value", [""], [], "getValFromInput", confixWrapper("functionCall", "document.getElementById(s)", ["s"], [s], "getValFromInput", document.getElementById(s)).value);
  var base = confixWrapper("initvar", "var base = 10", [""], [], "getValFromInput", 10);
  if (confixWrapper("condition", "confixWrapper(\"functionCall\", \"val.charAt(0)\", [\"0\"], [0], \"getValFromInput\", val.charAt(0)) == '#'", ["s", "maxv", "ret", "val", "base", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [s, maxv, ret, val, base, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "getValFromInput", confixWrapper("functionCall", "val.charAt(0)", ["0"], [0], "getValFromInput", val.charAt(0)) == '#')) 
  {
    base = confixWrapper("infix", "base = 16", [""], [], "getValFromInput", 16);
    val = confixWrapper("infix", "val = confixWrapper(\"functionCall\", \"val.substring(1, val.length)\", [\"1\", \"val.length\"], [1, val.length], \"getValFromInput\", val.substring(1, val.length))", [""], [], "getValFromInput", confixWrapper("functionCall", "val.substring(1, val.length)", ["1", "val.length"], [1, val.length], "getValFromInput", val.substring(1, val.length)));
  }
  if (confixWrapper("condition", "val && confixWrapper(\"functionCall\", \"parseInt(val, base)\", [\"val\", \"base\"], [val, base], \"getValFromInput\", parseInt(val, base))", ["s", "maxv", "ret", "val", "base", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [s, maxv, ret, val, base, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "getValFromInput", val && confixWrapper("functionCall", "parseInt(val, base)", ["val", "base"], [val, base], "getValFromInput", parseInt(val, base)))) 
  ret = confixWrapper("infix", "ret = confixWrapper(\"functionCall\", \"parseInt(val, base)\", [\"val\", \"base\"], [val, base], \"getValFromInput\", parseInt(val, base))", [""], [], "getValFromInput", confixWrapper("functionCall", "parseInt(val, base)", ["val", "base"], [val, base], "getValFromInput", parseInt(val, base)));
  if (confixWrapper("condition", "maxv && ret > maxv", ["s", "maxv", "ret", "val", "base", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [s, maxv, ret, val, base, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "getValFromInput", maxv && ret > maxv)) 
  ret = confixWrapper("infix", "ret = maxv", [""], [], "getValFromInput", maxv);
  return confixWrapper("return", "return ret;", [""], [], "getValFromInput", ret);
}
function resetByHSV() {
  tC_HSV = confixWrapper("infix", "tC_HSV = confixWrapper(\"functionCall\", \"Array(getValFromInput('ECP_myH', 360), getValFromInput('ECP_myS', 100), getValFromInput('ECP_myV', 100))\", [\"getValFromInput(ECP_myH, 360)\", \"getValFromInput(ECP_myS, 100)\", \"getValFromInput(ECP_myV, 100)\"], [confixWrapper(\"functionCall\", \"getValFromInput('ECP_myH', 360)\", [\"ECP_myH\", \"360\"], ['ECP_myH', 360], \"resetByHSV\", getValFromInput('ECP_myH', 360)), getValFromInput('ECP_myS', 100), getValFromInput('ECP_myV', 100)], \"resetByHSV\", Array(confixWrapper(\"functionCall\", \"getValFromInput('ECP_myH', 360)\", [\"ECP_myH\", \"360\"], ['ECP_myH', 360], \"resetByHSV\", getValFromInput('ECP_myH', 360)), getValFromInput('ECP_myS', 100), getValFromInput('ECP_myV', 100)))", [""], [], "resetByHSV", confixWrapper("functionCall", "Array(getValFromInput('ECP_myH', 360), getValFromInput('ECP_myS', 100), getValFromInput('ECP_myV', 100))", ["getValFromInput(ECP_myH, 360)", "getValFromInput(ECP_myS, 100)", "getValFromInput(ECP_myV, 100)"], [confixWrapper("functionCall", "getValFromInput('ECP_myH', 360)", ["ECP_myH", "360"], ['ECP_myH', 360], "resetByHSV", getValFromInput('ECP_myH', 360)), getValFromInput('ECP_myS', 100), getValFromInput('ECP_myV', 100)], "resetByHSV", Array(confixWrapper("functionCall", "getValFromInput('ECP_myH', 360)", ["ECP_myH", "360"], ['ECP_myH', 360], "resetByHSV", getValFromInput('ECP_myH', 360)), getValFromInput('ECP_myS', 100), getValFromInput('ECP_myV', 100))));
  tC_RGB = confixWrapper("infix", "tC_RGB = confixWrapper(\"functionCall\", \"hsv2rgb(tC_HSV)\", [\"tC_HSV\"], [tC_HSV], \"resetByHSV\", hsv2rgb(tC_HSV))", [""], [], "resetByHSV", confixWrapper("functionCall", "hsv2rgb(tC_HSV)", ["tC_HSV"], [tC_HSV], "resetByHSV", hsv2rgb(tC_HSV)));
  confixWrapper("functionCall", "hoverColor()", [], [], "resetByHSV", hoverColor());
  return confixWrapper("return", "return false;", [""], [], "resetByHSV", false);
}
function resetByRGB() {
  var theRGB = confixWrapper("initvar", "var theRGB = new Array()", [""], [], "resetByRGB", new Array());
  for (var i = confixWrapper("initvar", "var i = 0", [""], [], "resetByRGB", 0); confixWrapper("loopCondition", "i < 3", [""], [], "resetByRGB", i < 3); i++) 
    theRGB[i] = confixWrapper("infix", "theRGB[i] = confixWrapper(\"functionCall\", \"getValFromInput('ECP_my' + ('RGB').charAt(i), 255)\", [\"ECP_my + (RGB).charAt(i)\", \"255\"], ['ECP_my' + confixWrapper(\"functionCall\", \"('RGB').charAt(i)\", [\"i\"], [i], \"resetByRGB\", ('RGB').charAt(i)), 255], \"resetByRGB\", getValFromInput('ECP_my' + confixWrapper(\"functionCall\", \"('RGB').charAt(i)\", [\"i\"], [i], \"resetByRGB\", ('RGB').charAt(i)), 255))", [""], [], "resetByRGB", confixWrapper("functionCall", "getValFromInput('ECP_my' + ('RGB').charAt(i), 255)", ["ECP_my + (RGB).charAt(i)", "255"], ['ECP_my' + confixWrapper("functionCall", "('RGB').charAt(i)", ["i"], [i], "resetByRGB", ('RGB').charAt(i)), 255], "resetByRGB", getValFromInput('ECP_my' + confixWrapper("functionCall", "('RGB').charAt(i)", ["i"], [i], "resetByRGB", ('RGB').charAt(i)), 255)));
  tC_RGB = confixWrapper("infix", "tC_RGB = theRGB", [""], [], "resetByRGB", theRGB);
  tC_HSV = confixWrapper("infix", "tC_HSV = confixWrapper(\"functionCall\", \"rgb2hsv(tC_RGB)\", [\"tC_RGB\"], [tC_RGB], \"resetByRGB\", rgb2hsv(tC_RGB))", [""], [], "resetByRGB", confixWrapper("functionCall", "rgb2hsv(tC_RGB)", ["tC_RGB"], [tC_RGB], "resetByRGB", rgb2hsv(tC_RGB)));
  confixWrapper("functionCall", "hoverColor()", [], [], "resetByRGB", hoverColor());
  return confixWrapper("return", "return false;", [""], [], "resetByRGB", false);
}
function resetByRGBS(s) {
  if (confixWrapper("condition", "s.tagName && confixWrapper(\"functionCall\", \"s.tagName.toLowerCase()\", [], [], \"resetByRGBS\", s.tagName.toLowerCase()) == 'div'", ["s", "re", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [s, re, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "resetByRGBS", s.tagName && confixWrapper("functionCall", "s.tagName.toLowerCase()", [], [], "resetByRGBS", s.tagName.toLowerCase()) == 'div')) 
  s = confixWrapper("infix", "s = confixWrapper(\"functionCall\", \"document.getElementById(s.id.substring(0, 6) + 'Sinput' + s.id.substring(12, s.id.length))\", [\"s.id.substring(0, 6) + Sinput + s.id.substring(12, s.id.length)\"], [confixWrapper(\"functionCall\", \"s.id.substring(0, 6)\", [\"0\", \"6\"], [0, 6], \"resetByRGBS\", s.id.substring(0, 6)) + 'Sinput' + s.id.substring(12, s.id.length)], \"resetByRGBS\", document.getElementById(confixWrapper(\"functionCall\", \"s.id.substring(0, 6)\", [\"0\", \"6\"], [0, 6], \"resetByRGBS\", s.id.substring(0, 6)) + 'Sinput' + s.id.substring(12, s.id.length))).innerHTML", ["confixWrapper(\"functionCall\", \"document.getElementById(s.id.substring(0, 6) + 'Sinput' + s.id.substring(12, s.id.length))\", [\"s.id.substring(0, 6) + Sinput + s.id.substring(12, s.id.length)\"], [confixWrapper(\"functionCall\", \"s.id.substring(0, 6)\", [\"0\", \"6\"], [0, 6], \"resetByRGBS\", s.id.substring(0, 6)) + 'Sinput' + s.id.substring(12, s.id.length)], \"resetByRGBS\", document.getElementById(confixWrapper(\"functionCall\", \"s.id.substring(0, 6)\", [\"0\", \"6\"], [0, 6], \"resetByRGBS\", s.id.substring(0, 6)) + 'Sinput' + s.id.substring(12, s.id.length)))"], [confixWrapper("functionCall", "document.getElementById(s.id.substring(0, 6) + 'Sinput' + s.id.substring(12, s.id.length))", ["s.id.substring(0, 6) + Sinput + s.id.substring(12, s.id.length)"], [confixWrapper("functionCall", "s.id.substring(0, 6)", ["0", "6"], [0, 6], "resetByRGBS", s.id.substring(0, 6)) + 'Sinput' + s.id.substring(12, s.id.length)], "resetByRGBS", document.getElementById(confixWrapper("functionCall", "s.id.substring(0, 6)", ["0", "6"], [0, 6], "resetByRGBS", s.id.substring(0, 6)) + 'Sinput' + s.id.substring(12, s.id.length)))], "resetByRGBS", confixWrapper("functionCall", "document.getElementById(s.id.substring(0, 6) + 'Sinput' + s.id.substring(12, s.id.length))", ["s.id.substring(0, 6) + Sinput + s.id.substring(12, s.id.length)"], [confixWrapper("functionCall", "s.id.substring(0, 6)", ["0", "6"], [0, 6], "resetByRGBS", s.id.substring(0, 6)) + 'Sinput' + s.id.substring(12, s.id.length)], "resetByRGBS", document.getElementById(confixWrapper("functionCall", "s.id.substring(0, 6)", ["0", "6"], [0, 6], "resetByRGBS", s.id.substring(0, 6)) + 'Sinput' + s.id.substring(12, s.id.length))).innerHTML);
  if (confixWrapper("condition", "confixWrapper(\"functionCall\", \"s.charAt(0)\", [\"0\"], [0], \"resetByRGBS\", s.charAt(0)) == '#'", ["s", "re", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [s, re, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "resetByRGBS", confixWrapper("functionCall", "s.charAt(0)", ["0"], [0], "resetByRGBS", s.charAt(0)) == '#')) 
  s = confixWrapper("infix", "s = confixWrapper(\"functionCall\", \"s.substring(1, s.length)\", [\"1\", \"s.length\"], [1, s.length], \"resetByRGBS\", s.substring(1, s.length))", [""], [], "resetByRGBS", confixWrapper("functionCall", "s.substring(1, s.length)", ["1", "s.length"], [1, s.length], "resetByRGBS", s.substring(1, s.length)));
  var re = confixWrapper("initvar", "var re = /^([da-f]{6})$/i", [""], [], "resetByRGBS", /^([\da-f]{6})$/i);
  if (confixWrapper("condition", "confixWrapper(\"functionCall\", \"re.test(s)\", [\"s\"], [s], \"resetByRGBS\", re.test(s))", ["s", "re", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [s, re, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "resetByRGBS", confixWrapper("functionCall", "re.test(s)", ["s"], [s], "resetByRGBS", re.test(s)))) 
  {
    tC_RGB = confixWrapper("infix", "tC_RGB = new Array(confixWrapper(\"functionCall\", \"parseInt(s.substring(0, 2), 16)\", [\"s.substring(0, 2)\", \"16\"], [confixWrapper(\"functionCall\", \"s.substring(0, 2)\", [\"0\", \"2\"], [0, 2], \"resetByRGBS\", s.substring(0, 2)), 16], \"resetByRGBS\", parseInt(confixWrapper(\"functionCall\", \"s.substring(0, 2)\", [\"0\", \"2\"], [0, 2], \"resetByRGBS\", s.substring(0, 2)), 16)), parseInt(confixWrapper(\"functionCall\", \"s.substring(2, 4)\", [\"2\", \"4\"], [2, 4], \"resetByRGBS\", s.substring(2, 4)), 16), parseInt(confixWrapper(\"functionCall\", \"s.substring(4, 6)\", [\"4\", \"6\"], [4, 6], \"resetByRGBS\", s.substring(4, 6)), 16))", [""], [], "resetByRGBS", new Array(confixWrapper("functionCall", "parseInt(s.substring(0, 2), 16)", ["s.substring(0, 2)", "16"], [confixWrapper("functionCall", "s.substring(0, 2)", ["0", "2"], [0, 2], "resetByRGBS", s.substring(0, 2)), 16], "resetByRGBS", parseInt(confixWrapper("functionCall", "s.substring(0, 2)", ["0", "2"], [0, 2], "resetByRGBS", s.substring(0, 2)), 16)), parseInt(confixWrapper("functionCall", "s.substring(2, 4)", ["2", "4"], [2, 4], "resetByRGBS", s.substring(2, 4)), 16), parseInt(confixWrapper("functionCall", "s.substring(4, 6)", ["4", "6"], [4, 6], "resetByRGBS", s.substring(4, 6)), 16)));
    tC_HSV = confixWrapper("infix", "tC_HSV = confixWrapper(\"functionCall\", \"rgb2hsv(tC_RGB)\", [\"tC_RGB\"], [tC_RGB], \"resetByRGBS\", rgb2hsv(tC_RGB))", [""], [], "resetByRGBS", confixWrapper("functionCall", "rgb2hsv(tC_RGB)", ["tC_RGB"], [tC_RGB], "resetByRGBS", rgb2hsv(tC_RGB)));
    confixWrapper("functionCall", "hoverColor()", [], [], "resetByRGBS", hoverColor());
  }
  return confixWrapper("return", "return false;", [""], [], "resetByRGBS", false);
}
function ECP_incdec(wut, how, stt) {
  if (confixWrapper("condition", "!stt", ["wut", "how", "stt", "method", "num", "wholes", "i", "maxv", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [wut, how, stt, method, num, wholes, i, maxv, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "ECP_incdec", !stt)) 
  stt = confixWrapper("infix", "stt = 250", [""], [], "ECP_incdec", 250);
  if (confixWrapper("condition", "!yetETCChg", ["wut", "how", "stt", "method", "num", "wholes", "i", "maxv", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [wut, how, stt, method, num, wholes, i, maxv, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "ECP_incdec", !yetETCChg)) 
  return;
  var method = confixWrapper("initvar", "var method = (wut == 'H' || wut == 'S' || wut == 'V') ? 'HSV' : 'RGB'", [""], [], "ECP_incdec", (wut == 'H' || wut == 'S' || wut == 'V') ? 'HSV' : 'RGB');
  var num = confixWrapper("initvar", "var num = 0", [""], [], "ECP_incdec", 0), wholes = confixWrapper("initvar", "var wholes = 'HSVRGB'", [""], [], "ECP_incdec", 'HSVRGB');
  for (var i = confixWrapper("initvar", "var i = 0", [""], [], "ECP_incdec", 0); confixWrapper("loopCondition", "i < 6", [""], [], "ECP_incdec", i < 6); i++) 
    if (confixWrapper("condition", "wut == confixWrapper(\"functionCall\", \"wholes.charAt(i)\", [\"i\"], [i], \"ECP_incdec\", wholes.charAt(i))", ["wut", "how", "stt", "method", "num", "wholes", "i", "maxv", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [wut, how, stt, method, num, wholes, i, maxv, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "ECP_incdec", wut == confixWrapper("functionCall", "wholes.charAt(i)", ["i"], [i], "ECP_incdec", wholes.charAt(i)))) 
    num = confixWrapper("infix", "num = i % 3", [""], [], "ECP_incdec", i % 3);
  if (confixWrapper("condition", "method == 'RGB'", ["wut", "how", "stt", "method", "num", "wholes", "i", "maxv", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [wut, how, stt, method, num, wholes, i, maxv, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "ECP_incdec", method == 'RGB')) 
  {
    if (confixWrapper("condition", "tC_RGB[num] + how <= 255 && tC_RGB[num] + how >= 0", ["wut", "how", "stt", "method", "num", "wholes", "i", "maxv", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [wut, how, stt, method, num, wholes, i, maxv, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "ECP_incdec", tC_RGB[num] + how <= 255 && tC_RGB[num] + how >= 0)) 
    {
      tC_RGB[num] += how;
      tC_HSV = confixWrapper("infix", "tC_HSV = confixWrapper(\"functionCall\", \"rgb2hsv(tC_RGB)\", [\"tC_RGB\"], [tC_RGB], \"ECP_incdec\", rgb2hsv(tC_RGB))", [""], [], "ECP_incdec", confixWrapper("functionCall", "rgb2hsv(tC_RGB)", ["tC_RGB"], [tC_RGB], "ECP_incdec", rgb2hsv(tC_RGB)));
      confixWrapper("functionCall", "hoverColor()", [], [], "ECP_incdec", hoverColor());
    }
  } else if (confixWrapper("condition", "wut == 'H'", ["wut", "how", "stt", "method", "num", "wholes", "i", "maxv", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [wut, how, stt, method, num, wholes, i, maxv, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "ECP_incdec", wut == 'H')) 
  {
    tC_HSV[0] = confixWrapper("infix", "tC_HSV[0] = (tC_HSV[0] + how + 360) % 360", [""], [], "ECP_incdec", (tC_HSV[0] + how + 360) % 360);
    tC_RGB = confixWrapper("infix", "tC_RGB = confixWrapper(\"functionCall\", \"hsv2rgb(tC_HSV)\", [\"tC_HSV\"], [tC_HSV], \"ECP_incdec\", hsv2rgb(tC_HSV))", [""], [], "ECP_incdec", confixWrapper("functionCall", "hsv2rgb(tC_HSV)", ["tC_HSV"], [tC_HSV], "ECP_incdec", hsv2rgb(tC_HSV)));
    confixWrapper("functionCall", "hoverColor()", [], [], "ECP_incdec", hoverColor());
  } else {
    var maxv = confixWrapper("initvar", "var maxv = new Array(360, 100, 100)", [""], [], "ECP_incdec", new Array(360, 100, 100));
    if (confixWrapper("condition", "tC_HSV[num] + how <= maxv[num] && tC_HSV[num] + how >= 0", ["wut", "how", "stt", "method", "num", "wholes", "i", "maxv", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [wut, how, stt, method, num, wholes, i, maxv, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "ECP_incdec", tC_HSV[num] + how <= maxv[num] && tC_HSV[num] + how >= 0)) 
    {
      tC_HSV[num] += how;
      tC_RGB = confixWrapper("infix", "tC_RGB = confixWrapper(\"functionCall\", \"hsv2rgb(tC_HSV)\", [\"tC_HSV\"], [tC_HSV], \"ECP_incdec\", hsv2rgb(tC_HSV))", [""], [], "ECP_incdec", confixWrapper("functionCall", "hsv2rgb(tC_HSV)", ["tC_HSV"], [tC_HSV], "ECP_incdec", hsv2rgb(tC_HSV)));
      confixWrapper("functionCall", "hoverColor()", [], [], "ECP_incdec", hoverColor());
    }
  }
  if (confixWrapper("condition", "yetETCChg", ["wut", "how", "stt", "method", "num", "wholes", "i", "maxv", "ECP_mouseisDown", "theColour", "tC_RGB", "tC_HSV"], [wut, how, stt, method, num, wholes, i, maxv, ECP_mouseisDown, theColour, tC_RGB, tC_HSV], "ECP_incdec", yetETCChg)) 
  confixWrapper("functionCall", "setTimeout('ECP_incdec('' + wut + '', ' + how + ', 50)', stt * (1 + isIE()))", ["ECP_incdec( + wut + ,  + how + , 50)", "stt * (1 + isIE())"], ['ECP_incdec(\'' + wut + '\', ' + how + ', 50)', stt * (1 + confixWrapper("functionCall", "isIE()", [], [], "ECP_incdec", isIE()))], "ECP_incdec", setTimeout('ECP_incdec(\'' + wut + '\', ' + how + ', 50)', stt * (1 + confixWrapper("functionCall", "isIE()", [], [], "ECP_incdec", isIE()))));
}
