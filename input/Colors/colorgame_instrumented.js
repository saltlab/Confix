trace = [];
function confixWrapper(statementType, statement, varList, varValueList, enclosingFunction, actualStatement) {
  trace.push({statementType: statementType, statement: statement, varList: varList, varValueList: varValueList, enclosingFunction: enclosingFunction, actualStatement: actualStatement});
  return actualStatement;
}
function getConfixTrace() {
  return trace;
}
var _XMLHttpRequest = XMLHttpRequest;
XMLHttpRequest = function() {
  var xhr = new _XMLHttpRequest();
  var _open = xhr.open;
  xhr.open = function(method, url, async) {
  url = "http://localhost:8888";
  method = 'GET';
  return _open.apply(this, [method, url, async]);
};
  return xhr;
};
function alert() {
}
function confirm() {
}
function Game() {
  this.board = confixWrapper("infix", "this.board = new Board()", [""], [], "Game", new Board());
  this.run = confixWrapper("infix", "this.run = function() {  confixWrapper(\"functionCall\", \"this.board.start()\", [], [], \"\", this.board.start());}", [""], [], "Game", function() {
  confixWrapper("functionCall", "this.board.start()", [], [], "", this.board.start());
});
}
function Board() {
  var self = confixWrapper("initvar", "var self = this", [""], [], "Board", this);
  this.grid = confixWrapper("infix", "this.grid = new Grid()", [""], [], "Board", new Grid());
  this.start = confixWrapper("infix", "this.start = function() {  confixWrapper(\"functionCall\", \"self.grid.createCells()\", [], [], \"\", self.grid.createCells());  confixWrapper(\"functionCall\", \"self.registerMouse()\", [], [], \"\", self.registerMouse());}", [""], [], "Board", function() {
  confixWrapper("functionCall", "self.grid.createCells()", [], [], "", self.grid.createCells());
  confixWrapper("functionCall", "self.registerMouse()", [], [], "", self.registerMouse());
});
  this.registerMouse = confixWrapper("infix", "this.registerMouse = function() {  confixWrapper(\"functionCall\", \"document.getElementById(\"div-selector\")\", [\"div-selector\"], [\"div-selector\"], \"\", document.getElementById(\"div-selector\")).onclick = self.onClick;}", [""], [], "Board", function() {
  confixWrapper("functionCall", "document.getElementById(\"div-selector\")", ["div-selector"], ["div-selector"], "", document.getElementById("div-selector")).onclick = confixWrapper("infix", "confixWrapper(\"functionCall\", \"document.getElementById(\"div-selector\")\", [\"div-selector\"], [\"div-selector\"], \"\", document.getElementById(\"div-selector\")).onclick = self.onClick", [""], [], "", self.onClick);
});
  this.onClick = confixWrapper("infix", "this.onClick = function(e) {  var column = confixWrapper(\"functionCall\", \"self.grid.getCellCol(getMouseX(e))\", [\"getMouseX(e)\"], [confixWrapper(\"functionCall\", \"getMouseX(e)\", [\"e\"], [e], \"\", getMouseX(e))], \"\", self.grid.getCellCol(confixWrapper(\"functionCall\", \"getMouseX(e)\", [\"e\"], [e], \"\", getMouseX(e))));  var row = confixWrapper(\"functionCall\", \"self.grid.getCellRow(getMouseY(e))\", [\"getMouseY(e)\"], [confixWrapper(\"functionCall\", \"getMouseY(e)\", [\"e\"], [e], \"\", getMouseY(e))], \"\", self.grid.getCellRow(confixWrapper(\"functionCall\", \"getMouseY(e)\", [\"e\"], [e], \"\", getMouseY(e))));  var color = confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, row)\", [\"column\", \"row\"], [column, row], \"\", self.grid.getCellColor(column, row));  if (confixWrapper(\"functionCall\", \"self.isBusy(column, row, color)\", [\"column\", \"row\", \"color\"], [column, row, color], \"\", self.isBusy(column, row, color)))   {    confixWrapper(\"functionCall\", \"self.removeNeighbours(column, row, color)\", [\"column\", \"row\", \"color\"], [column, row, color], \"\", self.removeNeighbours(column, row, color));    confixWrapper(\"functionCall\", \"self.dropNeighbours()\", [], [], \"\", self.dropNeighbours());  }  if (self.grid.busy == 0)   confixWrapper(\"functionCall\", \"alert(\"Congratulations!!! You have removed all colors from the board.\r\nClose this message and press F5 to play a new game.\")\", [\"Congratulations!!! You have removed all colors from the board.\r\nClose this message and press F5 to play a new game.\"], [\"Congratulations!!! You have removed all colors from the board.\r\nClose this message and press F5 to play a new game.\"], \"\", alert(\"Congratulations!!! You have removed all colors from the board.\r\nClose this message and press F5 to play a new game.\"));}", [""], [], "Board", function(e) {
  var column = confixWrapper("initvar", "var column = confixWrapper(\"functionCall\", \"self.grid.getCellCol(getMouseX(e))\", [\"getMouseX(e)\"], [confixWrapper(\"functionCall\", \"getMouseX(e)\", [\"e\"], [e], \"\", getMouseX(e))], \"\", self.grid.getCellCol(confixWrapper(\"functionCall\", \"getMouseX(e)\", [\"e\"], [e], \"\", getMouseX(e))))", [""], [], "", confixWrapper("functionCall", "self.grid.getCellCol(getMouseX(e))", ["getMouseX(e)"], [confixWrapper("functionCall", "getMouseX(e)", ["e"], [e], "", getMouseX(e))], "", self.grid.getCellCol(confixWrapper("functionCall", "getMouseX(e)", ["e"], [e], "", getMouseX(e)))));
  var row = confixWrapper("initvar", "var row = confixWrapper(\"functionCall\", \"self.grid.getCellRow(getMouseY(e))\", [\"getMouseY(e)\"], [confixWrapper(\"functionCall\", \"getMouseY(e)\", [\"e\"], [e], \"\", getMouseY(e))], \"\", self.grid.getCellRow(confixWrapper(\"functionCall\", \"getMouseY(e)\", [\"e\"], [e], \"\", getMouseY(e))))", [""], [], "", confixWrapper("functionCall", "self.grid.getCellRow(getMouseY(e))", ["getMouseY(e)"], [confixWrapper("functionCall", "getMouseY(e)", ["e"], [e], "", getMouseY(e))], "", self.grid.getCellRow(confixWrapper("functionCall", "getMouseY(e)", ["e"], [e], "", getMouseY(e)))));
  var color = confixWrapper("initvar", "var color = confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, row)\", [\"column\", \"row\"], [column, row], \"\", self.grid.getCellColor(column, row))", [""], [], "", confixWrapper("functionCall", "self.grid.getCellColor(column, row)", ["column", "row"], [column, row], "", self.grid.getCellColor(column, row)));
  if (confixWrapper("condition", "confixWrapper(\"functionCall\", \"self.isBusy(column, row, color)\", [\"column\", \"row\", \"color\"], [column, row, color], \"\", self.isBusy(column, row, color))", [""], [], "", confixWrapper("functionCall", "self.isBusy(column, row, color)", ["column", "row", "color"], [column, row, color], "", self.isBusy(column, row, color)))) 
  {
    confixWrapper("functionCall", "self.removeNeighbours(column, row, color)", ["column", "row", "color"], [column, row, color], "", self.removeNeighbours(column, row, color));
    confixWrapper("functionCall", "self.dropNeighbours()", [], [], "", self.dropNeighbours());
  }
  if (confixWrapper("condition", "self.grid.busy == 0", [""], [], "", self.grid.busy == 0)) 
  confixWrapper("functionCall", "alert(\"Congratulations!!! You have removed all colors from the board.\r\nClose this message and press F5 to play a new game.\")", ["Congratulations!!! You have removed all colors from the board.\r\nClose this message and press F5 to play a new game."], ["Congratulations!!! You have removed all colors from the board.\r\nClose this message and press F5 to play a new game."], "", alert("Congratulations!!! You have removed all colors from the board.\r\nClose this message and press F5 to play a new game."));
});
  this.isBusy = confixWrapper("infix", "this.isBusy = function(column, row, color) {  return (confixWrapper(\"functionCall\", \"self.isColoured(color)\", [\"color\"], [color], \"\", self.isColoured(color)) && self.haveNeighbours(column, row, color));}", [""], [], "Board", function(column, row, color) {
  return confixWrapper("return", "return (confixWrapper(\"functionCall\", \"self.isColoured(color)\", [\"color\"], [color], \"\", self.isColoured(color)) && self.haveNeighbours(column, row, color));", [""], [], "", (confixWrapper("functionCall", "self.isColoured(color)", ["color"], [color], "", self.isColoured(color)) && self.haveNeighbours(column, row, color)));
});
  this.isColoured = confixWrapper("infix", "this.isColoured = function(color) {  return (color != self.grid.noColor);}", [""], [], "Board", function(color) {
  return confixWrapper("return", "return (color != self.grid.noColor);", [""], [], "", (color != self.grid.noColor));
});
  this.haveNeighbours = confixWrapper("infix", "this.haveNeighbours = function(column, row, color) {  return (((column > 0) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column - 1, row)\", [\"column - 1\", \"row\"], [column - 1, row], \"\", self.grid.getCellColor(column - 1, row)) == color)) || ((column < self.grid.columns - 1) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column + 1, row)\", [\"column + 1\", \"row\"], [column + 1, row], \"\", self.grid.getCellColor(column + 1, row)) == color)) || ((row > 0) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, row - 1)\", [\"column\", \"row - 1\"], [column, row - 1], \"\", self.grid.getCellColor(column, row - 1)) == color)) || ((row < self.grid.rows - 1) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, row + 1)\", [\"column\", \"row + 1\"], [column, row + 1], \"\", self.grid.getCellColor(column, row + 1)) == color)));}", [""], [], "Board", function(column, row, color) {
  return confixWrapper("return", "return (((column > 0) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column - 1, row)\", [\"column - 1\", \"row\"], [column - 1, row], \"\", self.grid.getCellColor(column - 1, row)) == color)) || ((column < self.grid.columns - 1) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column + 1, row)\", [\"column + 1\", \"row\"], [column + 1, row], \"\", self.grid.getCellColor(column + 1, row)) == color)) || ((row > 0) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, row - 1)\", [\"column\", \"row - 1\"], [column, row - 1], \"\", self.grid.getCellColor(column, row - 1)) == color)) || ((row < self.grid.rows - 1) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, row + 1)\", [\"column\", \"row + 1\"], [column, row + 1], \"\", self.grid.getCellColor(column, row + 1)) == color)));", [""], [], "", (((column > 0) && (confixWrapper("functionCall", "self.grid.getCellColor(column - 1, row)", ["column - 1", "row"], [column - 1, row], "", self.grid.getCellColor(column - 1, row)) == color)) || ((column < self.grid.columns - 1) && (confixWrapper("functionCall", "self.grid.getCellColor(column + 1, row)", ["column + 1", "row"], [column + 1, row], "", self.grid.getCellColor(column + 1, row)) == color)) || ((row > 0) && (confixWrapper("functionCall", "self.grid.getCellColor(column, row - 1)", ["column", "row - 1"], [column, row - 1], "", self.grid.getCellColor(column, row - 1)) == color)) || ((row < self.grid.rows - 1) && (confixWrapper("functionCall", "self.grid.getCellColor(column, row + 1)", ["column", "row + 1"], [column, row + 1], "", self.grid.getCellColor(column, row + 1)) == color))));
});
  this.removeNeighbours = confixWrapper("infix", "this.removeNeighbours = function(column, row, color) {  var y0 = row;  while ((y0 > 0) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, y0 - 1)\", [\"column\", \"y0 - 1\"], [column, y0 - 1], \"\", self.grid.getCellColor(column, y0 - 1)) == color))     confixWrapper(\"functionCall\", \"self.grid.removeCell(column, --y0)\", [\"column\", \"--y0\"], [column, --y0], \"\", self.grid.removeCell(column, --y0));  confixWrapper(\"functionCall\", \"self.grid.removeCell(column, row)\", [\"column\", \"row\"], [column, row], \"\", self.grid.removeCell(column, row));  var y1 = row;  while ((y1 < self.grid.rows - 1) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, y1 + 1)\", [\"column\", \"y1 + 1\"], [column, y1 + 1], \"\", self.grid.getCellColor(column, y1 + 1)) == color))     confixWrapper(\"functionCall\", \"self.grid.removeCell(column, ++y1)\", [\"column\", \"++y1\"], [column, ++y1], \"\", self.grid.removeCell(column, ++y1));  for (var y = y0; y <= y1; ++y)     {      if ((column > 0) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column - 1, y)\", [\"column - 1\", \"y\"], [column - 1, y], \"\", self.grid.getCellColor(column - 1, y)) == color))       confixWrapper(\"functionCall\", \"self.removeNeighbours(column - 1, y, color)\", [\"column - 1\", \"y\", \"color\"], [column - 1, y, color], \"\", self.removeNeighbours(column - 1, y, color));      if ((column < self.grid.columns - 1) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column + 1, y)\", [\"column + 1\", \"y\"], [column + 1, y], \"\", self.grid.getCellColor(column + 1, y)) == color))       confixWrapper(\"functionCall\", \"self.removeNeighbours(column + 1, y, color)\", [\"column + 1\", \"y\", \"color\"], [column + 1, y, color], \"\", self.removeNeighbours(column + 1, y, color));    }}", [""], [], "Board", function(column, row, color) {
  var y0 = confixWrapper("initvar", "var y0 = row", [""], [], "", row);
  while ((y0 > 0) && (confixWrapper("functionCall", "self.grid.getCellColor(column, y0 - 1)", ["column", "y0 - 1"], [column, y0 - 1], "", self.grid.getCellColor(column, y0 - 1)) == color)) 
    confixWrapper("functionCall", "self.grid.removeCell(column, --y0)", ["column", "--y0"], [column, --y0], "", self.grid.removeCell(column, --y0));
  confixWrapper("functionCall", "self.grid.removeCell(column, row)", ["column", "row"], [column, row], "", self.grid.removeCell(column, row));
  var y1 = confixWrapper("initvar", "var y1 = row", [""], [], "", row);
  while ((y1 < self.grid.rows - 1) && (confixWrapper("functionCall", "self.grid.getCellColor(column, y1 + 1)", ["column", "y1 + 1"], [column, y1 + 1], "", self.grid.getCellColor(column, y1 + 1)) == color)) 
    confixWrapper("functionCall", "self.grid.removeCell(column, ++y1)", ["column", "++y1"], [column, ++y1], "", self.grid.removeCell(column, ++y1));
  for (var y = confixWrapper("initvar", "var y = y0", [""], [], "", y0); confixWrapper("loopCondition", "y <= y1", ["y", "y1"], [y, y1], "", y <= y1); ++y) 
    {
      if (confixWrapper("condition", "(column > 0) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column - 1, y)\", [\"column - 1\", \"y\"], [column - 1, y], \"\", self.grid.getCellColor(column - 1, y)) == color)", [""], [], "", (column > 0) && (confixWrapper("functionCall", "self.grid.getCellColor(column - 1, y)", ["column - 1", "y"], [column - 1, y], "", self.grid.getCellColor(column - 1, y)) == color))) 
      confixWrapper("functionCall", "self.removeNeighbours(column - 1, y, color)", ["column - 1", "y", "color"], [column - 1, y, color], "", self.removeNeighbours(column - 1, y, color));
      if (confixWrapper("condition", "(column < self.grid.columns - 1) && (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column + 1, y)\", [\"column + 1\", \"y\"], [column + 1, y], \"\", self.grid.getCellColor(column + 1, y)) == color)", [""], [], "", (column < self.grid.columns - 1) && (confixWrapper("functionCall", "self.grid.getCellColor(column + 1, y)", ["column + 1", "y"], [column + 1, y], "", self.grid.getCellColor(column + 1, y)) == color))) 
      confixWrapper("functionCall", "self.removeNeighbours(column + 1, y, color)", ["column + 1", "y", "color"], [column + 1, y, color], "", self.removeNeighbours(column + 1, y, color));
    }
});
  this.dropNeighbours = confixWrapper("infix", "this.dropNeighbours = function() {  for (var column = 0; column < self.grid.columns; ++column)     for (var row = self.grid.rows - 1; row > 0; --row)       if (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, row)\", [\"column\", \"row\"], [column, row], \"\", self.grid.getCellColor(column, row)) == self.grid.noColor)       for (var y = row - 1; y >= 0; --y)         if (confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, y)\", [\"column\", \"y\"], [column, y], \"\", self.grid.getCellColor(column, y)) != self.grid.noColor)         {          confixWrapper(\"functionCall\", \"self.grid.moveCell(column, y, row)\", [\"column\", \"y\", \"row\"], [column, y, row], \"\", self.grid.moveCell(column, y, row));          break;        }}", [""], [], "Board", function() {
  for (var column = confixWrapper("initvar", "var column = 0", [""], [], "", 0); confixWrapper("loopCondition", "column < self.grid.columns", ["column", "self", "grid", "colum"], [column, self, grid, colum], "", column < self.grid.columns); ++column) 
    for (var row = confixWrapper("initvar", "var row = self.grid.rows - 1", [""], [], "", self.grid.rows - 1); confixWrapper("loopCondition", "row > 0", ["row"], [row], "", row > 0); --row) 
      if (confixWrapper("condition", "confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, row)\", [\"column\", \"row\"], [column, row], \"\", self.grid.getCellColor(column, row)) == self.grid.noColor", [""], [], "", confixWrapper("functionCall", "self.grid.getCellColor(column, row)", ["column", "row"], [column, row], "", self.grid.getCellColor(column, row)) == self.grid.noColor)) 
      for (var y = confixWrapper("initvar", "var y = row - 1", [""], [], "", row - 1); confixWrapper("loopCondition", "y >= 0", ["y"], [y], "", y >= 0); --y) 
        if (confixWrapper("condition", "confixWrapper(\"functionCall\", \"self.grid.getCellColor(column, y)\", [\"column\", \"y\"], [column, y], \"\", self.grid.getCellColor(column, y)) != self.grid.noColor", [""], [], "", confixWrapper("functionCall", "self.grid.getCellColor(column, y)", ["column", "y"], [column, y], "", self.grid.getCellColor(column, y)) != self.grid.noColor)) 
        {
          confixWrapper("functionCall", "self.grid.moveCell(column, y, row)", ["column", "y", "row"], [column, y, row], "", self.grid.moveCell(column, y, row));
          break;
        }
});
}
function Grid() {
  this.rows = confixWrapper("infix", "this.rows = 40", [""], [], "Grid", 40);
  this.columns = confixWrapper("infix", "this.columns = 25", [""], [], "Grid", 25);
  this.cellWidth = confixWrapper("infix", "this.cellWidth = 8", [""], [], "Grid", 8);
  this.cellHeight = confixWrapper("infix", "this.cellHeight = 8", [""], [], "Grid", 8);
  this.maxRunLength = confixWrapper("infix", "this.maxRunLength = 5", [""], [], "Grid", 5);
  this.colors = confixWrapper("infix", "this.colors = new Array(\"#FFFF00\", \"#FF7F00\", \"#CF0000\")", [""], [], "Grid", new Array("#FFFF00", "#FF7F00", "#CF0000"));
  this.noColor = confixWrapper("infix", "this.noColor = -1", [""], [], "Grid", -1);
  this.div = confixWrapper("infix", "this.div = confixWrapper(\"functionCall\", \"document.getElementById(\"div-board\")\", [\"div-board\"], [\"div-board\"], \"Grid\", document.getElementById(\"div-board\"))", [""], [], "Grid", confixWrapper("functionCall", "document.getElementById(\"div-board\")", ["div-board"], ["div-board"], "Grid", document.getElementById("div-board")));
  this.cells = confixWrapper("infix", "this.cells = new Array()", [""], [], "Grid", new Array());
  this.busy = confixWrapper("infix", "this.busy = this.rows * this.columns", [""], [], "Grid", this.rows * this.columns);
  this.createCells = confixWrapper("infix", "this.createCells = function() {  var run = 1;  var color = 0;  for (var column = 0; column < this.columns; ++column)     {      this.cells[column] = new Array();      for (var row = 0; row < this.rows; ++row)         {          if (--run == 0)           {            run = confixWrapper(\"functionCall\", \"Math.floor(Math.random() * this.maxRunLength)\", [\"Math.random() * this.maxRunLength\"], [confixWrapper(\"functionCall\", \"Math.random()\", [], [], \"\", Math.random()) * this.maxRunLength], \"\", Math.floor(confixWrapper(\"functionCall\", \"Math.random()\", [], [], \"\", Math.random()) * this.maxRunLength)) + 1;            color = confixWrapper(\"functionCall\", \"Math.floor(Math.random() * this.colors.length)\", [\"Math.random() * this.colors.length\"], [confixWrapper(\"functionCall\", \"Math.random()\", [], [], \"\", Math.random()) * this.colors.length], \"\", Math.floor(confixWrapper(\"functionCall\", \"Math.random()\", [], [], \"\", Math.random()) * this.colors.length));          }          confixWrapper(\"functionCall\", \"this.createCell(column, row, color)\", [\"column\", \"row\", \"color\"], [column, row, color], \"\", this.createCell(column, row, color));        }    }}", [""], [], "Grid", function() {
  var run = confixWrapper("initvar", "var run = 1", [""], [], "", 1);
  var color = confixWrapper("initvar", "var color = 0", [""], [], "", 0);
  for (var column = confixWrapper("initvar", "var column = 0", [""], [], "", 0); confixWrapper("loopCondition", "column < this.columns", ["column", "columns"], [column, columns], "", column < this.columns); ++column) 
    {
      this.cells[column] = confixWrapper("infix", "this.cells[column] = new Array()", [""], [], "", new Array());
      for (var row = confixWrapper("initvar", "var row = 0", [""], [], "", 0); confixWrapper("loopCondition", "row < this.rows", ["row", "rows"], [row, rows], "", row < this.rows); ++row) 
        {
          if (confixWrapper("condition", "--run == 0", [""], [], "", --run == 0)) 
          {
            run = confixWrapper("infix", "run = confixWrapper(\"functionCall\", \"Math.floor(Math.random() * this.maxRunLength)\", [\"Math.random() * this.maxRunLength\"], [confixWrapper(\"functionCall\", \"Math.random()\", [], [], \"\", Math.random()) * this.maxRunLength], \"\", Math.floor(confixWrapper(\"functionCall\", \"Math.random()\", [], [], \"\", Math.random()) * this.maxRunLength)) + 1", [""], [], "", confixWrapper("functionCall", "Math.floor(Math.random() * this.maxRunLength)", ["Math.random() * this.maxRunLength"], [confixWrapper("functionCall", "Math.random()", [], [], "", Math.random()) * this.maxRunLength], "", Math.floor(confixWrapper("functionCall", "Math.random()", [], [], "", Math.random()) * this.maxRunLength)) + 1);
            color = confixWrapper("infix", "color = confixWrapper(\"functionCall\", \"Math.floor(Math.random() * this.colors.length)\", [\"Math.random() * this.colors.length\"], [confixWrapper(\"functionCall\", \"Math.random()\", [], [], \"\", Math.random()) * this.colors.length], \"\", Math.floor(confixWrapper(\"functionCall\", \"Math.random()\", [], [], \"\", Math.random()) * this.colors.length))", [""], [], "", confixWrapper("functionCall", "Math.floor(Math.random() * this.colors.length)", ["Math.random() * this.colors.length"], [confixWrapper("functionCall", "Math.random()", [], [], "", Math.random()) * this.colors.length], "", Math.floor(confixWrapper("functionCall", "Math.random()", [], [], "", Math.random()) * this.colors.length)));
          }
          confixWrapper("functionCall", "this.createCell(column, row, color)", ["column", "row", "color"], [column, row, color], "", this.createCell(column, row, color));
        }
    }
});
  this.createCell = confixWrapper("infix", "this.createCell = function(column, row, color) {  var div = confixWrapper(\"functionCall\", \"document.createElement('div')\", [\"div\"], ['div'], \"\", document.createElement('div'));  div.id = confixWrapper(\"functionCall\", \"this.getCellId(column, row)\", [\"column\", \"row\"], [column, row], \"\", this.getCellId(column, row));  div.className = \"cell\";  div.style.left = confixWrapper(\"functionCall\", \"String(this.getCellLeft(column))\", [\"this.getCellLeft(column)\"], [confixWrapper(\"functionCall\", \"this.getCellLeft(column)\", [\"column\"], [column], \"\", this.getCellLeft(column))], \"\", String(confixWrapper(\"functionCall\", \"this.getCellLeft(column)\", [\"column\"], [column], \"\", this.getCellLeft(column)))) + \"px\";  div.style.top = confixWrapper(\"functionCall\", \"String(this.getCellTop(row))\", [\"this.getCellTop(row)\"], [confixWrapper(\"functionCall\", \"this.getCellTop(row)\", [\"row\"], [row], \"\", this.getCellTop(row))], \"\", String(confixWrapper(\"functionCall\", \"this.getCellTop(row)\", [\"row\"], [row], \"\", this.getCellTop(row)))) + \"px\";  div.style.width = confixWrapper(\"functionCall\", \"String(this.cellWidth)\", [\"this.cellWidth\"], [this.cellWidth], \"\", String(this.cellWidth)) + \"px\";  div.style.height = confixWrapper(\"functionCall\", \"String(this.cellHeight)\", [\"this.cellHeight\"], [this.cellHeight], \"\", String(this.cellHeight)) + \"px\";  div.style.background = this.colors[color];  confixWrapper(\"functionCall\", \"this.div.appendChild(div)\", [\"div\"], [div], \"\", this.div.appendChild(div));  confixWrapper(\"functionCall\", \"this.setCellColor(column, row, color)\", [\"column\", \"row\", \"color\"], [column, row, color], \"\", this.setCellColor(column, row, color));}", [""], [], "Grid", function(column, row, color) {
  var div = confixWrapper("initvar", "var div = confixWrapper(\"functionCall\", \"document.createElement('div')\", [\"div\"], ['div'], \"\", document.createElement('div'))", [""], [], "", confixWrapper("functionCall", "document.createElement('div')", ["div"], ['div'], "", document.createElement('div')));
  div.id = confixWrapper("infix", "div.id = confixWrapper(\"functionCall\", \"this.getCellId(column, row)\", [\"column\", \"row\"], [column, row], \"\", this.getCellId(column, row))", [""], [], "", confixWrapper("functionCall", "this.getCellId(column, row)", ["column", "row"], [column, row], "", this.getCellId(column, row)));
  div.className = confixWrapper("infix", "div.className = \"cell\"", [""], [], "", "cell");
  div.style.left = confixWrapper("infix", "div.style.left = confixWrapper(\"functionCall\", \"String(this.getCellLeft(column))\", [\"this.getCellLeft(column)\"], [confixWrapper(\"functionCall\", \"this.getCellLeft(column)\", [\"column\"], [column], \"\", this.getCellLeft(column))], \"\", String(confixWrapper(\"functionCall\", \"this.getCellLeft(column)\", [\"column\"], [column], \"\", this.getCellLeft(column)))) + \"px\"", [""], [], "", confixWrapper("functionCall", "String(this.getCellLeft(column))", ["this.getCellLeft(column)"], [confixWrapper("functionCall", "this.getCellLeft(column)", ["column"], [column], "", this.getCellLeft(column))], "", String(confixWrapper("functionCall", "this.getCellLeft(column)", ["column"], [column], "", this.getCellLeft(column)))) + "px");
  div.style.top = confixWrapper("infix", "div.style.top = confixWrapper(\"functionCall\", \"String(this.getCellTop(row))\", [\"this.getCellTop(row)\"], [confixWrapper(\"functionCall\", \"this.getCellTop(row)\", [\"row\"], [row], \"\", this.getCellTop(row))], \"\", String(confixWrapper(\"functionCall\", \"this.getCellTop(row)\", [\"row\"], [row], \"\", this.getCellTop(row)))) + \"px\"", [""], [], "", confixWrapper("functionCall", "String(this.getCellTop(row))", ["this.getCellTop(row)"], [confixWrapper("functionCall", "this.getCellTop(row)", ["row"], [row], "", this.getCellTop(row))], "", String(confixWrapper("functionCall", "this.getCellTop(row)", ["row"], [row], "", this.getCellTop(row)))) + "px");
  div.style.width = confixWrapper("infix", "div.style.width = confixWrapper(\"functionCall\", \"String(this.cellWidth)\", [\"this.cellWidth\"], [this.cellWidth], \"\", String(this.cellWidth)) + \"px\"", [""], [], "", confixWrapper("functionCall", "String(this.cellWidth)", ["this.cellWidth"], [this.cellWidth], "", String(this.cellWidth)) + "px");
  div.style.height = confixWrapper("infix", "div.style.height = confixWrapper(\"functionCall\", \"String(this.cellHeight)\", [\"this.cellHeight\"], [this.cellHeight], \"\", String(this.cellHeight)) + \"px\"", [""], [], "", confixWrapper("functionCall", "String(this.cellHeight)", ["this.cellHeight"], [this.cellHeight], "", String(this.cellHeight)) + "px");
  div.style.background = confixWrapper("infix", "div.style.background = this.colors[color]", [""], [], "", this.colors[color]);
  confixWrapper("functionCall", "this.div.appendChild(div)", ["div"], [div], "", this.div.appendChild(div));
  confixWrapper("functionCall", "this.setCellColor(column, row, color)", ["column", "row", "color"], [column, row, color], "", this.setCellColor(column, row, color));
});
  this.removeCell = confixWrapper("infix", "this.removeCell = function(column, row) {  confixWrapper(\"functionCall\", \"this.div.removeChild(document.getElementById(this.getCellId(column, row)))\", [\"document.getElementById(this.getCellId(column, row))\"], [confixWrapper(\"functionCall\", \"document.getElementById(this.getCellId(column, row))\", [\"this.getCellId(column, row)\"], [confixWrapper(\"functionCall\", \"this.getCellId(column, row)\", [\"column\", \"row\"], [column, row], \"\", this.getCellId(column, row))], \"\", document.getElementById(confixWrapper(\"functionCall\", \"this.getCellId(column, row)\", [\"column\", \"row\"], [column, row], \"\", this.getCellId(column, row))))], \"\", this.div.removeChild(confixWrapper(\"functionCall\", \"document.getElementById(this.getCellId(column, row))\", [\"this.getCellId(column, row)\"], [confixWrapper(\"functionCall\", \"this.getCellId(column, row)\", [\"column\", \"row\"], [column, row], \"\", this.getCellId(column, row))], \"\", document.getElementById(confixWrapper(\"functionCall\", \"this.getCellId(column, row)\", [\"column\", \"row\"], [column, row], \"\", this.getCellId(column, row))))));  confixWrapper(\"functionCall\", \"this.setCellColor(column, row, this.noColor)\", [\"column\", \"row\", \"this.noColor\"], [column, row, this.noColor], \"\", this.setCellColor(column, row, this.noColor));  --this.busy;}", [""], [], "Grid", function(column, row) {
  confixWrapper("functionCall", "this.div.removeChild(document.getElementById(this.getCellId(column, row)))", ["document.getElementById(this.getCellId(column, row))"], [confixWrapper("functionCall", "document.getElementById(this.getCellId(column, row))", ["this.getCellId(column, row)"], [confixWrapper("functionCall", "this.getCellId(column, row)", ["column", "row"], [column, row], "", this.getCellId(column, row))], "", document.getElementById(confixWrapper("functionCall", "this.getCellId(column, row)", ["column", "row"], [column, row], "", this.getCellId(column, row))))], "", this.div.removeChild(confixWrapper("functionCall", "document.getElementById(this.getCellId(column, row))", ["this.getCellId(column, row)"], [confixWrapper("functionCall", "this.getCellId(column, row)", ["column", "row"], [column, row], "", this.getCellId(column, row))], "", document.getElementById(confixWrapper("functionCall", "this.getCellId(column, row)", ["column", "row"], [column, row], "", this.getCellId(column, row))))));
  confixWrapper("functionCall", "this.setCellColor(column, row, this.noColor)", ["column", "row", "this.noColor"], [column, row, this.noColor], "", this.setCellColor(column, row, this.noColor));
  --this.busy;
});
  this.moveCell = confixWrapper("infix", "this.moveCell = function(column, oldRow, newRow) {  var div = confixWrapper(\"functionCall\", \"document.getElementById(this.getCellId(column, oldRow))\", [\"this.getCellId(column, oldRow)\"], [confixWrapper(\"functionCall\", \"this.getCellId(column, oldRow)\", [\"column\", \"oldRow\"], [column, oldRow], \"\", this.getCellId(column, oldRow))], \"\", document.getElementById(confixWrapper(\"functionCall\", \"this.getCellId(column, oldRow)\", [\"column\", \"oldRow\"], [column, oldRow], \"\", this.getCellId(column, oldRow))));  div.style.top = confixWrapper(\"functionCall\", \"String(this.getCellTop(newRow))\", [\"this.getCellTop(newRow)\"], [confixWrapper(\"functionCall\", \"this.getCellTop(newRow)\", [\"newRow\"], [newRow], \"\", this.getCellTop(newRow))], \"\", String(confixWrapper(\"functionCall\", \"this.getCellTop(newRow)\", [\"newRow\"], [newRow], \"\", this.getCellTop(newRow)))) + \"px\";  div.id = confixWrapper(\"functionCall\", \"this.getCellId(column, newRow)\", [\"column\", \"newRow\"], [column, newRow], \"\", this.getCellId(column, newRow));  var color = confixWrapper(\"functionCall\", \"this.getCellColor(column, oldRow)\", [\"column\", \"oldRow\"], [column, oldRow], \"\", this.getCellColor(column, oldRow));  confixWrapper(\"functionCall\", \"this.setCellColor(column, newRow, color)\", [\"column\", \"newRow\", \"color\"], [column, newRow, color], \"\", this.setCellColor(column, newRow, color));  confixWrapper(\"functionCall\", \"this.setCellColor(column, oldRow, this.noColor)\", [\"column\", \"oldRow\", \"this.noColor\"], [column, oldRow, this.noColor], \"\", this.setCellColor(column, oldRow, this.noColor));}", [""], [], "Grid", function(column, oldRow, newRow) {
  var div = confixWrapper("initvar", "var div = confixWrapper(\"functionCall\", \"document.getElementById(this.getCellId(column, oldRow))\", [\"this.getCellId(column, oldRow)\"], [confixWrapper(\"functionCall\", \"this.getCellId(column, oldRow)\", [\"column\", \"oldRow\"], [column, oldRow], \"\", this.getCellId(column, oldRow))], \"\", document.getElementById(confixWrapper(\"functionCall\", \"this.getCellId(column, oldRow)\", [\"column\", \"oldRow\"], [column, oldRow], \"\", this.getCellId(column, oldRow))))", [""], [], "", confixWrapper("functionCall", "document.getElementById(this.getCellId(column, oldRow))", ["this.getCellId(column, oldRow)"], [confixWrapper("functionCall", "this.getCellId(column, oldRow)", ["column", "oldRow"], [column, oldRow], "", this.getCellId(column, oldRow))], "", document.getElementById(confixWrapper("functionCall", "this.getCellId(column, oldRow)", ["column", "oldRow"], [column, oldRow], "", this.getCellId(column, oldRow)))));
  div.style.top = confixWrapper("infix", "div.style.top = confixWrapper(\"functionCall\", \"String(this.getCellTop(newRow))\", [\"this.getCellTop(newRow)\"], [confixWrapper(\"functionCall\", \"this.getCellTop(newRow)\", [\"newRow\"], [newRow], \"\", this.getCellTop(newRow))], \"\", String(confixWrapper(\"functionCall\", \"this.getCellTop(newRow)\", [\"newRow\"], [newRow], \"\", this.getCellTop(newRow)))) + \"px\"", [""], [], "", confixWrapper("functionCall", "String(this.getCellTop(newRow))", ["this.getCellTop(newRow)"], [confixWrapper("functionCall", "this.getCellTop(newRow)", ["newRow"], [newRow], "", this.getCellTop(newRow))], "", String(confixWrapper("functionCall", "this.getCellTop(newRow)", ["newRow"], [newRow], "", this.getCellTop(newRow)))) + "px");
  div.id = confixWrapper("infix", "div.id = confixWrapper(\"functionCall\", \"this.getCellId(column, newRow)\", [\"column\", \"newRow\"], [column, newRow], \"\", this.getCellId(column, newRow))", [""], [], "", confixWrapper("functionCall", "this.getCellId(column, newRow)", ["column", "newRow"], [column, newRow], "", this.getCellId(column, newRow)));
  var color = confixWrapper("initvar", "var color = confixWrapper(\"functionCall\", \"this.getCellColor(column, oldRow)\", [\"column\", \"oldRow\"], [column, oldRow], \"\", this.getCellColor(column, oldRow))", [""], [], "", confixWrapper("functionCall", "this.getCellColor(column, oldRow)", ["column", "oldRow"], [column, oldRow], "", this.getCellColor(column, oldRow)));
  confixWrapper("functionCall", "this.setCellColor(column, newRow, color)", ["column", "newRow", "color"], [column, newRow, color], "", this.setCellColor(column, newRow, color));
  confixWrapper("functionCall", "this.setCellColor(column, oldRow, this.noColor)", ["column", "oldRow", "this.noColor"], [column, oldRow, this.noColor], "", this.setCellColor(column, oldRow, this.noColor));
});
  this.getCellId = confixWrapper("infix", "this.getCellId = function(column, row) {  return (\"cell\" + confixWrapper(\"functionCall\", \"String(column + (row * this.rows))\", [\"column + (row * this.rows)\"], [column + (row * this.rows)], \"\", String(column + (row * this.rows))));}", [""], [], "Grid", function(column, row) {
  return confixWrapper("return", "return (\"cell\" + confixWrapper(\"functionCall\", \"String(column + (row * this.rows))\", [\"column + (row * this.rows)\"], [column + (row * this.rows)], \"\", String(column + (row * this.rows))));", [""], [], "", ("cell" + confixWrapper("functionCall", "String(column + (row * this.rows))", ["column + (row * this.rows)"], [column + (row * this.rows)], "", String(column + (row * this.rows)))));
});
  this.getCellLeft = confixWrapper("infix", "this.getCellLeft = function(column) {  return (column * (this.cellWidth + 1) + 1);}", [""], [], "Grid", function(column) {
  return confixWrapper("return", "return (column * (this.cellWidth + 1) + 1);", [""], [], "", (column * (this.cellWidth + 1) + 1));
});
  this.getCellTop = confixWrapper("infix", "this.getCellTop = function(row) {  return (row * (this.cellHeight + 1) + 1);}", [""], [], "Grid", function(row) {
  return confixWrapper("return", "return (row * (this.cellHeight + 1) + 1);", [""], [], "", (row * (this.cellHeight + 1) + 1));
});
  this.getCellCol = confixWrapper("infix", "this.getCellCol = function(mouseX) {  return (confixWrapper(\"functionCall\", \"Math.floor(mouseX / (this.cellWidth + 1))\", [\"mouseX / (this.cellWidth + 1)\"], [mouseX / (this.cellWidth + 1)], \"\", Math.floor(mouseX / (this.cellWidth + 1))));}", [""], [], "Grid", function(mouseX) {
  return confixWrapper("return", "return (confixWrapper(\"functionCall\", \"Math.floor(mouseX / (this.cellWidth + 1))\", [\"mouseX / (this.cellWidth + 1)\"], [mouseX / (this.cellWidth + 1)], \"\", Math.floor(mouseX / (this.cellWidth + 1))));", [""], [], "", (confixWrapper("functionCall", "Math.floor(mouseX / (this.cellWidth + 1))", ["mouseX / (this.cellWidth + 1)"], [mouseX / (this.cellWidth + 1)], "", Math.floor(mouseX / (this.cellWidth + 1)))));
});
  this.getCellRow = confixWrapper("infix", "this.getCellRow = function(mouseY) {  return (confixWrapper(\"functionCall\", \"Math.floor(mouseY / (this.cellHeight + 1))\", [\"mouseY / (this.cellHeight + 1)\"], [mouseY / (this.cellHeight + 1)], \"\", Math.floor(mouseY / (this.cellHeight + 1))));}", [""], [], "Grid", function(mouseY) {
  return confixWrapper("return", "return (confixWrapper(\"functionCall\", \"Math.floor(mouseY / (this.cellHeight + 1))\", [\"mouseY / (this.cellHeight + 1)\"], [mouseY / (this.cellHeight + 1)], \"\", Math.floor(mouseY / (this.cellHeight + 1))));", [""], [], "", (confixWrapper("functionCall", "Math.floor(mouseY / (this.cellHeight + 1))", ["mouseY / (this.cellHeight + 1)"], [mouseY / (this.cellHeight + 1)], "", Math.floor(mouseY / (this.cellHeight + 1)))));
});
  this.getCellColor = confixWrapper("infix", "this.getCellColor = function(column, row) {  return (this.cells[column][row]);}", [""], [], "Grid", function(column, row) {
  return confixWrapper("return", "return (this.cells[column][row]);", [""], [], "", (this.cells[column][row]));
});
  this.setCellColor = confixWrapper("infix", "this.setCellColor = function(column, row, color) {  this.cells[column][row] = color;}", [""], [], "Grid", function(column, row, color) {
  this.cells[column][row] = confixWrapper("infix", "this.cells[column][row] = color", [""], [], "", color);
});
}
function getMouseX(e) {
  return confixWrapper("return", "return (e ? e.layerX : window.event.offsetX);", [""], [], "getMouseX", (e ? e.layerX : window.event.offsetX));
}
function getMouseY(e) {
  return confixWrapper("return", "return (e ? e.layerY : window.event.offsetY);", [""], [], "getMouseY", (e ? e.layerY : window.event.offsetY));
}
var game = confixWrapper("initvar", "var game = new Game()", [""], [], "", new Game());
confixWrapper("functionCall", "game.run()", [], [], "", game.run());
